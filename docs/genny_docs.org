* Introduction
Hello! These are the docs for Genny specifically. For an overall view of MongoDB's performance testing infrastructure, please look at the [[https://github.com/10gen/performance-tooling-docs][Performance Tooling Docs]].

If you have any questions, please reach out to the TIPS team in our dedicated slack channel: #performance-tooling-users. If you feel like these docs can be improved in any way, feel free to open a PR and assign someone from TIPS. No ticket necessary. This document is intended to be readable straight-through, in addition to serving as a reference on an as-needed basis. If there are any difficulties in flow or discoverability, please let us know.

* Getting Started and Building
For build instructions, see the installation guide [[file:setup.md][here]].

To launch Genny, navigate to the root of the Genny repo and run the following: 

#+BEGIN_SRC
./run-genny workload src/workloads/docs/HelloWorld.yml
#+END_SRC

Whenever you have questions about the Genny CLI, you can always use the ~-h~ option for the top-level Genny CLI or any subcommands:

#+BEGIN_SRC
./run-genny -h # See all subcommands
./run-genny workload -h # See args and options for the workload subcommand
#+END_SRC

* Core Concepts
This section introduces the core concepts used by Genny, the minimal required syntax for its inputs, and builds up a basic example.
** What is load generation?
Genny is a *load generation* tool. It is used as a client in [[https://en.wikipedia.org/wiki/Load_testing][load tests]] to perform a large amount of work against a system under test, measuring the client-side visible responses of said test subject. These measurements may represent things like latency, number of operations performed, how many errors occurred, etc. The procedure Genny uses to perform the work should be as deterministic and repeatable as possible. This procedure is called a *workload*.

Results of a load test can inform developers as to the performance of the test subject in stressful situations. How does a system handle increasing numbers of connections performing conflicting operations? How does a system handle a large number of users performing one operation, then simultaneously switching to another in an instant? How does one user initiating a long-running, expensive operation affect the latencies observed by other users? All these situations can be simulated with Genny.
** What is the system under test?
Genny usually expects to be given a connection string to a system under test. While there's nothing preventing a user from writing a "workload" that spawns the system under test, there is not first-class support for such behavior. Genny is explicitly _not_ a test orchestrator. For test orchestration needs, consider using [[https://github.com/10gen/dsi/][DSI]].

By default, Genny will try to connect to a MongoDB server at ~localhost:27017~. To pass a MongoDB connection string to Genny, use the ~-u~ option:

#+BEGIN_SRC
./run-genny workload -u [arbitrary_URI] src/workloads/docs/InsertWithNop.yml
#+END_SRC

For more details on how Genny handles connections, see [[*Connecting to the Server][Connecting to the Server]].
** What is a workload?
A *workload* is a repeatable procedure that Genny uses to generate load against a system under test. Genny workloads are written in yaml configs that describe how *actors* move through *phases*. This section describes each of these.
*** How are workloads configured?
Here is an example of a simple Genny workload config:

#+BEGIN_SRC
SchemaVersion: 2018-07-01
Owner: "@10gen/dev-prod-tips"
Description: |
  This is an introductory workload that shows how to write a workload in Genny.
  This workload writes a few messages to the screen.

Keywords:
- docs
- HelloWorld

Actors:
- Name: HelloWorldExample
  Type: HelloWorld
  Threads: 2
  Phases:
  - Message: Hello Phase 0 üê≥
    Duration: 50 milliseconds
  - Message: Hello Phase 1 üë¨
    Repeat: 100
#+END_SRC

Everything under the ~Actor~ key (where the magic happens) will be explained in the next section. First let's look at the other *required* keys:

- ~SchemaVersion~ - This is a basic versioning system used for Genny workload syntax. For the moment, any new workloads should have the value ~2018-07-01~ for this key.
- ~Owner~ - This should have an identifier for the team that owns the workload, ideally an @-mentionable GitHub team.
- ~Description~ - This should contain a written description of the workload. It's recommended to go into as much detail as possible, since understanding the performance issue behind why a workload was written can be difficult months or years later.
- ~Keywords~ - These should be searchable keywords associated with your workload. Include keywords for actors used, operations performed, qualities of the system under test that are expected, etc.

Workload configurations can be found in [[file:../src/workloads][./src/workloads]] from the Genny repo root. Organization of this directory is arbitrary as far as Genny is concerned, though example workloads should be in the ~docs~ subdir.
*** What is an actor?
Genny uses an actor-based model for its workload generation. When execution begins, Genny spawns all configured actors in their own threads. Each actor can behave independently, be configured separately, and even has its own source code. In the example above, the following is the actor configuration:

#+BEGIN_SRC
Actors:
- Name: HelloWorldExample
  Type: HelloWorld
  Threads: 2
  Phases:
  - Message: Hello Phase 0 üê≥
    Duration: 50 milliseconds
  - Message: Hello Phase 1 üë¨
    Repeat: 100
#+END_SRC

In this example, there is a single ~HelloWorld~ actor allocated two threads. This actor moves through a series of phases, printing a message in each. Phases are described further in the next section. Each thread contains a complete "instance" of the actor, configured identically. We could add more actors like so:

#+BEGIN_SRC
Actors:
- Name: HelloWorldExample
  Type: HelloWorld
  Threads: 2
  Phases:
  - Message: Hello Phase 0 üê≥
    Duration: 50 milliseconds
  - Message: Hello Phase 1 üë¨
    Repeat: 100
- Name: InsertRemoveExample
  Type: InsertRemove
  Threads: 100
  Phases:
  - Duration: 10 milliseconds
  - Nop
#+END_SRC

This example has an additional ~InsertRemove~ actor with 100 threads, where each thread inserts and removes a document as fast as possible. Note that even though the actors are listed sequentially, all actors are concurrent.

Actor configurations expect the following keys:
- ~Name~ - The human-understandable name of this particular actor configuration. This should be unique throughout the workload.
- ~Type~ - The kind of actor to create. This determines the actor's behavior and possible configuration options.
- ~Threads~ - How many threads to allocate for this actor.
- ~Phases~ - A list of phase configurations (described in next section).

In addition to the universal fields above, individual actors may have their own configuration keys, such as the ~Message~ key of the ~HelloWorld~ actor, used to determine what message is printed.

Actors are written in C++, and creating new actors or extending existing ones is a common and encouraged workflow when using Genny. For more details, see [[* Creating an Actor][Creating an Actor]].
*** What is a phase?
Genny workloads and actors proceed in a sequence of phases, configured inside actors. In the running example, our ~HelloWorld~ actor is configured with two phases:

#+BEGIN_SRC
Actors:
- Name: HelloWorldExample
  Type: HelloWorld
  Threads: 2
  Phases:
  - Message: Hello Phase 0 üê≥
    Duration: 50 milliseconds
  - Message: Hello Phase 1 üë¨
    Repeat: 100
#+END_SRC

This actor will execute the first phase for 50 milleseconds. It will perform iterations of its main loop (printing "Hello Phase 0") as many times as it can for that duration. It will then move on to the second phase, where it will perform exactly 100 iterations of its main loop (printing "Hello Phase 1"), regardless of how long it takes. Then the workload will end.

Now consider a situation with two actors:

#+BEGIN_SRC
Actors:
- Name: HelloWorldExample
  Type: HelloWorld
  Threads: 2
  Phases:
  - Message: Hello Phase 0 üê≥
    Duration: 50 milliseconds
  - Message: Hello Phase 1 üë¨
    Repeat: 100
- Name: HelloWorldSecondExample
  Type: HelloWorld
  Threads: 1
  Phases:
  - Message: Other Actor Phase 0
    Duration: 10 milliseconds
  - Message: Other Actor Phase 1
    Duration: 10 milliseconds
#+END_SRC

Here we have the ~HelloWorldSecondExample~ actor running for 10 milliseconds in each phase. However, the second phase will not begin after 10 seconds. It's important to note that phases are coordinated globally, and actors configured with either ~Repeat~ or ~Duration~ will hold the phase open. In this case, ~HelloWorldSecondExample~ will operate for 10 milliseconds during the first phase, sleep for 40 milliseconds for the rest of the phase, then after ~HelloWorldExample~ finishes holding the phase open, both actors will begin the next phase.

Phase configurations accept the following keys:
- ~Duration~ - How long to operate in this phase while holding the phase open.
- ~Repeat~ - How many times to repeat the operation while holding the phase open.
- ~Blocking~ - This key can be specified with the value ~None~ to cause the actor to run as a background actor for this phase. This actor will act as many times as possible during the phase without holding it open, then move on to the next phase when everyone else is ready.
- ~Nop~ - This key can be set with the value ~true~ to cause the actor to nop for the duration of the phase.

A couple of notes:
- You can specify both ~Repeat~ and ~Duration~ for a phase. Whichever lasts longer wins.
- It is undefined behavior if a given phase does not have some actor specifying ~Repeat~ or ~Duration~.
** Outputs
*** FTDC Metrics
*** Preprocessed Workload
** Workload Development
** Minimal running example?
* Further Concepts
** Connecting to the Server
** Common Actors
** Phase Details
*** SleepBefore
*** SleepAfter
*** GlobalRate
**** Algorithm used, how to smooth
*** Background Actor
** Generators
** Preprocessor
*** Evaluate
*** LoadConfig
*** Parameters
*** ActorTemplate
*** OnlyActiveInPhases
*** Overrides
** Conventions and Value Interpretation
** Creating an Actor
*** PhaseLoop
*** Gennylib API
*** Operations
*** Integration Tests
*** LINK: Developing in Genny
*** LINK: Contribution Guidelines
** Internal Metrics
** Pre-seeded Data
* Common Pitfalls (FAQ)
