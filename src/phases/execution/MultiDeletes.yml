SchemaVersion: 2018-07-01
Owner: "@mongodb/server-execution"
Description: >
  Runs a workload that deletes a large range of documents while performing writes on another collection.
  Allows for comparing the performance of the DELETE_STAGE vs the BATCHED_DELETE_STAGE, primarily in terms
  of deletion throughput, and w:majority latencies of the concurrent writes.
  The mass deletion namespace is __internalBatchedDeletesTesting.Collection0
  The concurrent writes namespace is __internalBatchedDeletesTesting.concurrentWritesColl

Keywords:
- RunCommand
- Loader
- LoggingActor
- CrudActor
- insert
- delete
- batch
- deleteMany
- latency

GlobalDefaults:
  # Configurable parameters.
  DocumentCount: &DocumentCount {^Parameter: {Name: "DocumentCount", Default: 100_000_000}}
  # Number of documents to batch into an insert. This should be configurable because large docs may hit a memory limit if the batch size is fixed.
  InsertBatchSize: &InsertBatchSize {^Parameter: {Name: "InsertBatchSize", Default: 1_000}}
  # TODO: If TIG-4092 gets resolved, compute DocumentSizePaddingBytes from number and size of fields
  # and a DocumentTargetSizeBytes
  # The size of the documents inserted and deleted into collections during this test.
  DocumentSizePaddingBytes: &DocumentSizePaddingBytes {^Parameter: {Name: "DocumentSizePaddingBytes", Default: 0}}
  # Whether to use the BATCHED_DELETE query exec stage over DELETE.
  UseBatchedDeleteStage: &UseBatchedDeleteStage {^Parameter: {Name: "UseBatchedDeleteStage", Default: 0}}
  # Configuration file to use: delete by primary (default) or delete with secondary indexes.
  ConfigFile: &ConfigFile {^Parameter: {Name: "ConfigurationFile", Default: "../../phases/execution/config/MultiDeletes/Default.yml"}}
  # Insert same document for both default and with secondary indexes to remove one variable.
  InsertDocument: &DocumentToInsert
    a: &rs {^FastRandomString: {length: 6, alphabet: "0123456789"}}
    b: *rs
    c: *rs
    d: *rs
    e: *rs
    f: *rs
    g: *rs
    padding: {^FastRandomString: {length: *DocumentSizePaddingBytes}}
  # Delete by primary index always.
  DeleteQuery: &DeleteQuery
    {_id: {$gte: {^ObjectId: "000000000000000000000000"}}}

# Constants.
WriteRate: &WriteRate 1 per 500 microseconds  # 2000/second
ConcurrentWritesColl: &ConcurrentWritesColl concurrentWritesColl

# Constants hardcoded in server (see TIG-3945, TIG-3882).
Database: &Database __internalBatchedDeletesTesting
MassDeletionsColl: &MassDeletionsColl Collection0

Actors:
# Phase 1: Initialize the database.
- Name: InitializeDatabase
  Type: RunCommand
  Threads: 1
  Phases:
  - Repeat: 1
    Database: *Database
    Operations:
      LoadConfig:
        Path: *ConfigFile
        Key: InitializeDatabaseOps
  - &Nop {Nop: true}
  - *Nop
  - *Nop
  - *Nop
  - *Nop

# Phase 2: Select between DELETE and BATCHED_DELETE query exec stage.
- Name: SelectDeleteExecutor
  Type: RunCommand
  Threads: 1
  Phases:
  - *Nop
  - Repeat: 1
    Database: admin
    Operation:
      OperationMetricsName: SelectDeleteExecutor
      OperationName: RunCommand
      OperationCommand:
        setParameter: 1
        internalBatchUserMultiDeletesForTest: *UseBatchedDeleteStage
  - *Nop
  - *Nop
  - *Nop
  - *Nop

# Phase 3: Populate the collection for mass deletion. TODO Make multithreaded once TIG-2938 is resolved.
- Name: PopulateInitialData0
  Type: Loader
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - Repeat: 1
    Database: *Database
    Threads: 1
    CollectionCount: 1
    DocumentCount: *DocumentCount
    BatchSize: *InsertBatchSize
    Document:
      *DocumentToInsert
  - *Nop
  - *Nop
  - *Nop

# Phase 3: Guard against timeout due to no logging during PopulateInitialData0.
- Name: LoggingActor0
  Type: LoggingActor
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - LogEvery: 9 minutes
    Blocking: None
  - *Nop
  - *Nop
  - *Nop

# Phase 4: Issue a large delete that should take a considerable amount of time to run. This delete
# will run with no concurrent writes to the database.
- Name: LargeMultiDelete0
  Type: CrudActor
  Database: *Database
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - Repeat: 1
    MetricsName: DuringMassDeletion0
    Database: *Database
    Collection: *MassDeletionsColl
    Operations:
    - OperationName: bulkWrite
      OperationCommand:
        WriteOperations:
        - WriteCommand: deleteMany
          Filter:
            *DeleteQuery
          OperationOptions:
            WriteConcern: { Level: "majority" }
  - *Nop
  - *Nop

# Phase 5: Populate the collection for mass deletion again, in preparation for phase 6 when concurrent writes will be
# issued to another collection in the same database. TODO Make multithreaded once TIG-2938 is resolved.
- Name: PopulateInitialData1
  Type: Loader
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - Repeat: 1
    Threads: 1
    Database: *Database
    Collection: *MassDeletionsColl
    CollectionCount: 1
    DocumentCount: *DocumentCount
    BatchSize: *InsertBatchSize
    Document:
      *DocumentToInsert
  - *Nop

# Phase 5: Guard against timeout due to no logging during PopulateInitialData1.
- Name: LoggingActor1
  Type: LoggingActor
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - LogEvery: 9 minutes
    Blocking: None
  - *Nop

# Phase 6: Issue a large delete that should take a considerable amount of time to run. This delete
# will run with concurrent writes to another collection.
- Name: LargeMultiDelete1
  Type: CrudActor
  Database: *Database
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - Repeat: 1
    MetricsName: DuringMassDeletion1
    Collection: *MassDeletionsColl
    Operations:
    - OperationName: bulkWrite
      OperationCommand:
        WriteOperations:
        - WriteCommand: deleteMany
          Filter:
            *DeleteQuery
          OperationOptions:
            WriteConcern: { Level: "majority" }

# Phase 6: Perform some write operations - see how write latency is impacted on ConcurrentWritesColl by the large delete on MassDeletionsColl.
- Name: Insert
  Type: CrudActor
  Database: *Database
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - Blocking: None
    GlobalRate: *WriteRate
    Database: *Database
    Collection: *ConcurrentWritesColl
    Operations:
    - OperationName: insertOne
      OperationCommand:
        Document:
          *DocumentToInsert
