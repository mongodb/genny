SchemaVersion: 2018-07-01
Owner: "@mongodb/server-execution"
Description: >
  Runs a workload that deletes a large range of documents while performing writes on another collection.
  Allows for comparing the performance of the DELETE_STAGE vs the BATCHED_DELETE_STAGE, primarily in terms
  of deletion throughput, and w:majority latencies of the concurrent writes.
  The mass deletion namespace is test.Collection0
  The concurrent writes namespace is test.concurrentWritesColl

GlobalDefaults:
  # Configurable parameters.
  DocumentCount: &DocumentCount {^Parameter: {Name: "DocumentCount", Default: 100_000_000}}
  # The size of the documents inserted and deleted into collections during this test.
  DocumentSizePaddingBytes: &DocumentSizePaddingBytes {^Parameter: {Name: "DocumentSizePaddingBytes", Default: 0}}
  # Whether to use the BATCHED_DELETE query exec stage over DELETE.
  UseBatchedDeleteStage: &UseBatchedDeleteStage {^Parameter: {Name: "UseBatchedDeleteStage", Default: 0}}

# Constants
WriteRate: &WriteRate 1 per 500 microseconds  # 2000/second
ConcurrentWritesColl: &ConcurrentWritesColl concurrentWritesColl

Database: &Database test
MassDeletionsColl: &MassDeletionsColl Collection0

Actors:

# Phase 1: Drop the database.
- Name: DropDatabase
  Type: RunCommand
  Threads: 1
  Phases:
  - Repeat: 1
    Database: *Database
    Operations:
    - OperationName: RunCommand
      OperationCommand: {dropDatabase: 1}
  - &Nop {Nop: true}
  - *Nop
  - *Nop
  - *Nop
  - *Nop

# Phase 2: Select between DELETE and BATCHED_DELETE query exec stage.
- Name: SelectDeleteExecutor
  Type: RunCommand
  Threads: 1
  Phases:
  - *Nop
  - Repeat: 1
    Database: admin
    Operation:
      OperationMetricsName: SelectDeleteExecutor
      OperationName: RunCommand
      OperationCommand:
        setParameter: 1
        batchUserMultiDeletes: *UseBatchedDeleteStage
  - *Nop
  - *Nop
  - *Nop
  - *Nop

# Phase 3: Populate the collection for mass deletion. TODO Make multithreaded once TIG-2938 is resolved.
- Name: PopulateInitialData0
  Type: Loader
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - Repeat: 1
    Database: *Database
    Threads: 1
    CollectionCount: 1
    DocumentCount: *DocumentCount
    BatchSize: 1000
    Document:
      padding: {^FastRandomString: {length: *DocumentSizePaddingBytes}}
  - *Nop
  - *Nop
  - *Nop

# Phase 3: Guard against timeout due to no logging during PopulateInitialData0.
- Name: LoggingActor0
  Type: LoggingActor
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - LogEvery: 9 minutes
    Blocking: None
  - *Nop
  - *Nop
  - *Nop

# Phase 4: Issue a large delete that should take a considerable amount of time to run. This delete
# will run with no concurrent writes to the database.
- Name: LargeMultiDelete0
  Type: CrudActor
  Database: *Database
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - Repeat: 1
    MetricsName: DuringMassDeletion0
    Database: *Database
    Collection: *MassDeletionsColl
    Operations:
    - OperationName: bulkWrite
      OperationCommand:
        WriteOperations:
        - WriteCommand: deleteMany
          # Filter by the smallest OID so all documents are included.
          Filter: {_id: {$gte: {^ObjectId: "000000000000000000000000"}}}
          OperationOptions:
            WriteConcern: { Level: "majority" }
  - *Nop
  - *Nop

# Phase 5: Populate the collection for mass deletion again, in preparation for phase 6 when concurrent writes will be
# issued to another collection in the same database. TODO Make multithreaded once TIG-2938 is resolved.
- Name: PopulateInitialData1
  Type: Loader
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - Repeat: 1
    Threads: 1
    Database: *Database
    Collection: *MassDeletionsColl
    CollectionCount: 1
    DocumentCount: *DocumentCount
    BatchSize: 1000
    Document:
      padding: {^FastRandomString: {length: *DocumentSizePaddingBytes}}
  - *Nop

# Phase 5: Guard against timeout due to no logging during PopulateInitialData1.
- Name: LoggingActor1
  Type: LoggingActor
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - LogEvery: 9 minutes
    Blocking: None
  - *Nop

# Phase 6: Issue a large delete that should take a considerable amount of time to run. This delete
# will run with concurrent writes to another collection.
- Name: LargeMultiDelete1
  Type: CrudActor
  Database: *Database
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - Repeat: 1
    MetricsName: DuringMassDeletion1
    Collection: *MassDeletionsColl
    Operations:
    - OperationName: bulkWrite
      OperationCommand:
        WriteOperations:
        - WriteCommand: deleteMany
          # Filter by the smallest OID so all documents are included.
          Filter: {_id: {$gte: {^ObjectId: "000000000000000000000000"}}}
          OperationOptions:
            WriteConcern: { Level: "majority" }

# Phase 6: Perform some write operations - see how write latency is impacted on ConcurrentWritesColl by the large delete on MassDeletionsColl.
- Name: Insert
  Type: CrudActor
  Database: *Database
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - Blocking: None
    GlobalRate: *WriteRate
    Database: *Database
    Collection: *ConcurrentWritesColl
    Operations:
    - OperationName: insertOne
      OperationCommand:
        Document:
          padding: {^FastRandomString: {length: *DocumentSizePaddingBytes}}
AutoRun:
- When:
    mongodb_setup:
      $eq:
      - replica-all-feature-flags
      - shard-lite-all-feature-flags
