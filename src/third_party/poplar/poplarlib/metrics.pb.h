// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "poplar.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metrics_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metrics_2eproto;
namespace poplar {
class IntervalSummary;
struct IntervalSummaryDefaultTypeInternal;
extern IntervalSummaryDefaultTypeInternal _IntervalSummary_default_instance_;
class SummaryDouble;
struct SummaryDoubleDefaultTypeInternal;
extern SummaryDoubleDefaultTypeInternal _SummaryDouble_default_instance_;
class SummaryDoubleSlice;
struct SummaryDoubleSliceDefaultTypeInternal;
extern SummaryDoubleSliceDefaultTypeInternal _SummaryDoubleSlice_default_instance_;
class SummaryInteger;
struct SummaryIntegerDefaultTypeInternal;
extern SummaryIntegerDefaultTypeInternal _SummaryInteger_default_instance_;
class SummaryIntegerSlice;
struct SummaryIntegerSliceDefaultTypeInternal;
extern SummaryIntegerSliceDefaultTypeInternal _SummaryIntegerSlice_default_instance_;
}  // namespace poplar
PROTOBUF_NAMESPACE_OPEN
template<> ::poplar::IntervalSummary* Arena::CreateMaybeMessage<::poplar::IntervalSummary>(Arena*);
template<> ::poplar::SummaryDouble* Arena::CreateMaybeMessage<::poplar::SummaryDouble>(Arena*);
template<> ::poplar::SummaryDoubleSlice* Arena::CreateMaybeMessage<::poplar::SummaryDoubleSlice>(Arena*);
template<> ::poplar::SummaryInteger* Arena::CreateMaybeMessage<::poplar::SummaryInteger>(Arena*);
template<> ::poplar::SummaryIntegerSlice* Arena::CreateMaybeMessage<::poplar::SummaryIntegerSlice>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace poplar {

// ===================================================================

class IntervalSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.IntervalSummary) */ {
 public:
  inline IntervalSummary() : IntervalSummary(nullptr) {}
  ~IntervalSummary() override;
  explicit PROTOBUF_CONSTEXPR IntervalSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntervalSummary(const IntervalSummary& from);
  IntervalSummary(IntervalSummary&& from) noexcept
    : IntervalSummary() {
    *this = ::std::move(from);
  }

  inline IntervalSummary& operator=(const IntervalSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalSummary& operator=(IntervalSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntervalSummary& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kNumber = 2,
    kNumberValues = 3,
    kPoint = 4,
    kPointValues = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const IntervalSummary* internal_default_instance() {
    return reinterpret_cast<const IntervalSummary*>(
               &_IntervalSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntervalSummary& a, IntervalSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntervalSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntervalSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntervalSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntervalSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IntervalSummary& from) {
    IntervalSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntervalSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.IntervalSummary";
  }
  protected:
  explicit IntervalSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectorFieldNumber = 1,
    kNumberFieldNumber = 2,
    kNumberValuesFieldNumber = 3,
    kPointFieldNumber = 4,
    kPointValuesFieldNumber = 5,
  };
  // string collector = 1;
  void clear_collector();
  const std::string& collector() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_collector(ArgT0&& arg0, ArgT... args);
  std::string* mutable_collector();
  PROTOBUF_NODISCARD std::string* release_collector();
  void set_allocated_collector(std::string* collector);
  private:
  const std::string& _internal_collector() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_collector(const std::string& value);
  std::string* _internal_mutable_collector();
  public:

  // .poplar.SummaryInteger number = 2;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  const ::poplar::SummaryInteger& number() const;
  PROTOBUF_NODISCARD ::poplar::SummaryInteger* release_number();
  ::poplar::SummaryInteger* mutable_number();
  void set_allocated_number(::poplar::SummaryInteger* number);
  private:
  const ::poplar::SummaryInteger& _internal_number() const;
  ::poplar::SummaryInteger* _internal_mutable_number();
  public:
  void unsafe_arena_set_allocated_number(
      ::poplar::SummaryInteger* number);
  ::poplar::SummaryInteger* unsafe_arena_release_number();

  // .poplar.SummaryIntegerSlice number_values = 3;
  bool has_number_values() const;
  private:
  bool _internal_has_number_values() const;
  public:
  void clear_number_values();
  const ::poplar::SummaryIntegerSlice& number_values() const;
  PROTOBUF_NODISCARD ::poplar::SummaryIntegerSlice* release_number_values();
  ::poplar::SummaryIntegerSlice* mutable_number_values();
  void set_allocated_number_values(::poplar::SummaryIntegerSlice* number_values);
  private:
  const ::poplar::SummaryIntegerSlice& _internal_number_values() const;
  ::poplar::SummaryIntegerSlice* _internal_mutable_number_values();
  public:
  void unsafe_arena_set_allocated_number_values(
      ::poplar::SummaryIntegerSlice* number_values);
  ::poplar::SummaryIntegerSlice* unsafe_arena_release_number_values();

  // .poplar.SummaryDouble point = 4;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::poplar::SummaryDouble& point() const;
  PROTOBUF_NODISCARD ::poplar::SummaryDouble* release_point();
  ::poplar::SummaryDouble* mutable_point();
  void set_allocated_point(::poplar::SummaryDouble* point);
  private:
  const ::poplar::SummaryDouble& _internal_point() const;
  ::poplar::SummaryDouble* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::poplar::SummaryDouble* point);
  ::poplar::SummaryDouble* unsafe_arena_release_point();

  // .poplar.SummaryDoubleSlice point_values = 5;
  bool has_point_values() const;
  private:
  bool _internal_has_point_values() const;
  public:
  void clear_point_values();
  const ::poplar::SummaryDoubleSlice& point_values() const;
  PROTOBUF_NODISCARD ::poplar::SummaryDoubleSlice* release_point_values();
  ::poplar::SummaryDoubleSlice* mutable_point_values();
  void set_allocated_point_values(::poplar::SummaryDoubleSlice* point_values);
  private:
  const ::poplar::SummaryDoubleSlice& _internal_point_values() const;
  ::poplar::SummaryDoubleSlice* _internal_mutable_point_values();
  public:
  void unsafe_arena_set_allocated_point_values(
      ::poplar::SummaryDoubleSlice* point_values);
  ::poplar::SummaryDoubleSlice* unsafe_arena_release_point_values();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:poplar.IntervalSummary)
 private:
  class _Internal;
  void set_has_number();
  void set_has_number_values();
  void set_has_point();
  void set_has_point_values();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collector_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::poplar::SummaryInteger* number_;
      ::poplar::SummaryIntegerSlice* number_values_;
      ::poplar::SummaryDouble* point_;
      ::poplar::SummaryDoubleSlice* point_values_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryIntegerSlice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.SummaryIntegerSlice) */ {
 public:
  inline SummaryIntegerSlice() : SummaryIntegerSlice(nullptr) {}
  ~SummaryIntegerSlice() override;
  explicit PROTOBUF_CONSTEXPR SummaryIntegerSlice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummaryIntegerSlice(const SummaryIntegerSlice& from);
  SummaryIntegerSlice(SummaryIntegerSlice&& from) noexcept
    : SummaryIntegerSlice() {
    *this = ::std::move(from);
  }

  inline SummaryIntegerSlice& operator=(const SummaryIntegerSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryIntegerSlice& operator=(SummaryIntegerSlice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryIntegerSlice& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryIntegerSlice* internal_default_instance() {
    return reinterpret_cast<const SummaryIntegerSlice*>(
               &_SummaryIntegerSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SummaryIntegerSlice& a, SummaryIntegerSlice& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryIntegerSlice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryIntegerSlice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SummaryIntegerSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SummaryIntegerSlice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SummaryIntegerSlice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SummaryIntegerSlice& from) {
    SummaryIntegerSlice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryIntegerSlice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.SummaryIntegerSlice";
  }
  protected:
  explicit SummaryIntegerSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated int64 value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  int64_t _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_value() const;
  void _internal_add_value(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_value();
  public:
  int64_t value(int index) const;
  void set_value(int index, int64_t value);
  void add_value(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_value();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:poplar.SummaryIntegerSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > value_;
    mutable std::atomic<int> _value_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryInteger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.SummaryInteger) */ {
 public:
  inline SummaryInteger() : SummaryInteger(nullptr) {}
  ~SummaryInteger() override;
  explicit PROTOBUF_CONSTEXPR SummaryInteger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummaryInteger(const SummaryInteger& from);
  SummaryInteger(SummaryInteger&& from) noexcept
    : SummaryInteger() {
    *this = ::std::move(from);
  }

  inline SummaryInteger& operator=(const SummaryInteger& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryInteger& operator=(SummaryInteger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryInteger& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryInteger* internal_default_instance() {
    return reinterpret_cast<const SummaryInteger*>(
               &_SummaryInteger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SummaryInteger& a, SummaryInteger& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryInteger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryInteger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SummaryInteger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SummaryInteger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SummaryInteger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SummaryInteger& from) {
    SummaryInteger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryInteger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.SummaryInteger";
  }
  protected:
  explicit SummaryInteger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 value = 2;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.SummaryInteger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryDoubleSlice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.SummaryDoubleSlice) */ {
 public:
  inline SummaryDoubleSlice() : SummaryDoubleSlice(nullptr) {}
  ~SummaryDoubleSlice() override;
  explicit PROTOBUF_CONSTEXPR SummaryDoubleSlice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummaryDoubleSlice(const SummaryDoubleSlice& from);
  SummaryDoubleSlice(SummaryDoubleSlice&& from) noexcept
    : SummaryDoubleSlice() {
    *this = ::std::move(from);
  }

  inline SummaryDoubleSlice& operator=(const SummaryDoubleSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryDoubleSlice& operator=(SummaryDoubleSlice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryDoubleSlice& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryDoubleSlice* internal_default_instance() {
    return reinterpret_cast<const SummaryDoubleSlice*>(
               &_SummaryDoubleSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SummaryDoubleSlice& a, SummaryDoubleSlice& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryDoubleSlice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryDoubleSlice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SummaryDoubleSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SummaryDoubleSlice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SummaryDoubleSlice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SummaryDoubleSlice& from) {
    SummaryDoubleSlice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryDoubleSlice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.SummaryDoubleSlice";
  }
  protected:
  explicit SummaryDoubleSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated double value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:poplar.SummaryDoubleSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class SummaryDouble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.SummaryDouble) */ {
 public:
  inline SummaryDouble() : SummaryDouble(nullptr) {}
  ~SummaryDouble() override;
  explicit PROTOBUF_CONSTEXPR SummaryDouble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SummaryDouble(const SummaryDouble& from);
  SummaryDouble(SummaryDouble&& from) noexcept
    : SummaryDouble() {
    *this = ::std::move(from);
  }

  inline SummaryDouble& operator=(const SummaryDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline SummaryDouble& operator=(SummaryDouble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SummaryDouble& default_instance() {
    return *internal_default_instance();
  }
  static inline const SummaryDouble* internal_default_instance() {
    return reinterpret_cast<const SummaryDouble*>(
               &_SummaryDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SummaryDouble& a, SummaryDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(SummaryDouble* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SummaryDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SummaryDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SummaryDouble>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SummaryDouble& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SummaryDouble& from) {
    SummaryDouble::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SummaryDouble* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.SummaryDouble";
  }
  protected:
  explicit SummaryDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.SummaryDouble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IntervalSummary

// string collector = 1;
inline void IntervalSummary::clear_collector() {
  _impl_.collector_.ClearToEmpty();
}
inline const std::string& IntervalSummary::collector() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.collector)
  return _internal_collector();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IntervalSummary::set_collector(ArgT0&& arg0, ArgT... args) {
 
 _impl_.collector_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.IntervalSummary.collector)
}
inline std::string* IntervalSummary::mutable_collector() {
  std::string* _s = _internal_mutable_collector();
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.collector)
  return _s;
}
inline const std::string& IntervalSummary::_internal_collector() const {
  return _impl_.collector_.Get();
}
inline void IntervalSummary::_internal_set_collector(const std::string& value) {
  
  _impl_.collector_.Set(value, GetArenaForAllocation());
}
inline std::string* IntervalSummary::_internal_mutable_collector() {
  
  return _impl_.collector_.Mutable(GetArenaForAllocation());
}
inline std::string* IntervalSummary::release_collector() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.collector)
  return _impl_.collector_.Release();
}
inline void IntervalSummary::set_allocated_collector(std::string* collector) {
  if (collector != nullptr) {
    
  } else {
    
  }
  _impl_.collector_.SetAllocated(collector, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.collector_.IsDefault()) {
    _impl_.collector_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.IntervalSummary.collector)
}

// .poplar.SummaryInteger number = 2;
inline bool IntervalSummary::_internal_has_number() const {
  return value_case() == kNumber;
}
inline bool IntervalSummary::has_number() const {
  return _internal_has_number();
}
inline void IntervalSummary::set_has_number() {
  _impl_._oneof_case_[0] = kNumber;
}
inline void IntervalSummary::clear_number() {
  if (_internal_has_number()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.number_;
    }
    clear_has_value();
  }
}
inline ::poplar::SummaryInteger* IntervalSummary::release_number() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.number)
  if (_internal_has_number()) {
    clear_has_value();
    ::poplar::SummaryInteger* temp = _impl_.value_.number_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::poplar::SummaryInteger& IntervalSummary::_internal_number() const {
  return _internal_has_number()
      ? *_impl_.value_.number_
      : reinterpret_cast< ::poplar::SummaryInteger&>(::poplar::_SummaryInteger_default_instance_);
}
inline const ::poplar::SummaryInteger& IntervalSummary::number() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.number)
  return _internal_number();
}
inline ::poplar::SummaryInteger* IntervalSummary::unsafe_arena_release_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:poplar.IntervalSummary.number)
  if (_internal_has_number()) {
    clear_has_value();
    ::poplar::SummaryInteger* temp = _impl_.value_.number_;
    _impl_.value_.number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IntervalSummary::unsafe_arena_set_allocated_number(::poplar::SummaryInteger* number) {
  clear_value();
  if (number) {
    set_has_number();
    _impl_.value_.number_ = number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.IntervalSummary.number)
}
inline ::poplar::SummaryInteger* IntervalSummary::_internal_mutable_number() {
  if (!_internal_has_number()) {
    clear_value();
    set_has_number();
    _impl_.value_.number_ = CreateMaybeMessage< ::poplar::SummaryInteger >(GetArenaForAllocation());
  }
  return _impl_.value_.number_;
}
inline ::poplar::SummaryInteger* IntervalSummary::mutable_number() {
  ::poplar::SummaryInteger* _msg = _internal_mutable_number();
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.number)
  return _msg;
}

// .poplar.SummaryIntegerSlice number_values = 3;
inline bool IntervalSummary::_internal_has_number_values() const {
  return value_case() == kNumberValues;
}
inline bool IntervalSummary::has_number_values() const {
  return _internal_has_number_values();
}
inline void IntervalSummary::set_has_number_values() {
  _impl_._oneof_case_[0] = kNumberValues;
}
inline void IntervalSummary::clear_number_values() {
  if (_internal_has_number_values()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.number_values_;
    }
    clear_has_value();
  }
}
inline ::poplar::SummaryIntegerSlice* IntervalSummary::release_number_values() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.number_values)
  if (_internal_has_number_values()) {
    clear_has_value();
    ::poplar::SummaryIntegerSlice* temp = _impl_.value_.number_values_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.number_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::poplar::SummaryIntegerSlice& IntervalSummary::_internal_number_values() const {
  return _internal_has_number_values()
      ? *_impl_.value_.number_values_
      : reinterpret_cast< ::poplar::SummaryIntegerSlice&>(::poplar::_SummaryIntegerSlice_default_instance_);
}
inline const ::poplar::SummaryIntegerSlice& IntervalSummary::number_values() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.number_values)
  return _internal_number_values();
}
inline ::poplar::SummaryIntegerSlice* IntervalSummary::unsafe_arena_release_number_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:poplar.IntervalSummary.number_values)
  if (_internal_has_number_values()) {
    clear_has_value();
    ::poplar::SummaryIntegerSlice* temp = _impl_.value_.number_values_;
    _impl_.value_.number_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IntervalSummary::unsafe_arena_set_allocated_number_values(::poplar::SummaryIntegerSlice* number_values) {
  clear_value();
  if (number_values) {
    set_has_number_values();
    _impl_.value_.number_values_ = number_values;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.IntervalSummary.number_values)
}
inline ::poplar::SummaryIntegerSlice* IntervalSummary::_internal_mutable_number_values() {
  if (!_internal_has_number_values()) {
    clear_value();
    set_has_number_values();
    _impl_.value_.number_values_ = CreateMaybeMessage< ::poplar::SummaryIntegerSlice >(GetArenaForAllocation());
  }
  return _impl_.value_.number_values_;
}
inline ::poplar::SummaryIntegerSlice* IntervalSummary::mutable_number_values() {
  ::poplar::SummaryIntegerSlice* _msg = _internal_mutable_number_values();
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.number_values)
  return _msg;
}

// .poplar.SummaryDouble point = 4;
inline bool IntervalSummary::_internal_has_point() const {
  return value_case() == kPoint;
}
inline bool IntervalSummary::has_point() const {
  return _internal_has_point();
}
inline void IntervalSummary::set_has_point() {
  _impl_._oneof_case_[0] = kPoint;
}
inline void IntervalSummary::clear_point() {
  if (_internal_has_point()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.point_;
    }
    clear_has_value();
  }
}
inline ::poplar::SummaryDouble* IntervalSummary::release_point() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.point)
  if (_internal_has_point()) {
    clear_has_value();
    ::poplar::SummaryDouble* temp = _impl_.value_.point_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::poplar::SummaryDouble& IntervalSummary::_internal_point() const {
  return _internal_has_point()
      ? *_impl_.value_.point_
      : reinterpret_cast< ::poplar::SummaryDouble&>(::poplar::_SummaryDouble_default_instance_);
}
inline const ::poplar::SummaryDouble& IntervalSummary::point() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.point)
  return _internal_point();
}
inline ::poplar::SummaryDouble* IntervalSummary::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_unsafe_arena_release:poplar.IntervalSummary.point)
  if (_internal_has_point()) {
    clear_has_value();
    ::poplar::SummaryDouble* temp = _impl_.value_.point_;
    _impl_.value_.point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IntervalSummary::unsafe_arena_set_allocated_point(::poplar::SummaryDouble* point) {
  clear_value();
  if (point) {
    set_has_point();
    _impl_.value_.point_ = point;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.IntervalSummary.point)
}
inline ::poplar::SummaryDouble* IntervalSummary::_internal_mutable_point() {
  if (!_internal_has_point()) {
    clear_value();
    set_has_point();
    _impl_.value_.point_ = CreateMaybeMessage< ::poplar::SummaryDouble >(GetArenaForAllocation());
  }
  return _impl_.value_.point_;
}
inline ::poplar::SummaryDouble* IntervalSummary::mutable_point() {
  ::poplar::SummaryDouble* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.point)
  return _msg;
}

// .poplar.SummaryDoubleSlice point_values = 5;
inline bool IntervalSummary::_internal_has_point_values() const {
  return value_case() == kPointValues;
}
inline bool IntervalSummary::has_point_values() const {
  return _internal_has_point_values();
}
inline void IntervalSummary::set_has_point_values() {
  _impl_._oneof_case_[0] = kPointValues;
}
inline void IntervalSummary::clear_point_values() {
  if (_internal_has_point_values()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.point_values_;
    }
    clear_has_value();
  }
}
inline ::poplar::SummaryDoubleSlice* IntervalSummary::release_point_values() {
  // @@protoc_insertion_point(field_release:poplar.IntervalSummary.point_values)
  if (_internal_has_point_values()) {
    clear_has_value();
    ::poplar::SummaryDoubleSlice* temp = _impl_.value_.point_values_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.point_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::poplar::SummaryDoubleSlice& IntervalSummary::_internal_point_values() const {
  return _internal_has_point_values()
      ? *_impl_.value_.point_values_
      : reinterpret_cast< ::poplar::SummaryDoubleSlice&>(::poplar::_SummaryDoubleSlice_default_instance_);
}
inline const ::poplar::SummaryDoubleSlice& IntervalSummary::point_values() const {
  // @@protoc_insertion_point(field_get:poplar.IntervalSummary.point_values)
  return _internal_point_values();
}
inline ::poplar::SummaryDoubleSlice* IntervalSummary::unsafe_arena_release_point_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:poplar.IntervalSummary.point_values)
  if (_internal_has_point_values()) {
    clear_has_value();
    ::poplar::SummaryDoubleSlice* temp = _impl_.value_.point_values_;
    _impl_.value_.point_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void IntervalSummary::unsafe_arena_set_allocated_point_values(::poplar::SummaryDoubleSlice* point_values) {
  clear_value();
  if (point_values) {
    set_has_point_values();
    _impl_.value_.point_values_ = point_values;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.IntervalSummary.point_values)
}
inline ::poplar::SummaryDoubleSlice* IntervalSummary::_internal_mutable_point_values() {
  if (!_internal_has_point_values()) {
    clear_value();
    set_has_point_values();
    _impl_.value_.point_values_ = CreateMaybeMessage< ::poplar::SummaryDoubleSlice >(GetArenaForAllocation());
  }
  return _impl_.value_.point_values_;
}
inline ::poplar::SummaryDoubleSlice* IntervalSummary::mutable_point_values() {
  ::poplar::SummaryDoubleSlice* _msg = _internal_mutable_point_values();
  // @@protoc_insertion_point(field_mutable:poplar.IntervalSummary.point_values)
  return _msg;
}

inline bool IntervalSummary::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void IntervalSummary::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline IntervalSummary::ValueCase IntervalSummary::value_case() const {
  return IntervalSummary::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SummaryIntegerSlice

// string name = 1;
inline void SummaryIntegerSlice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SummaryIntegerSlice::name() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryIntegerSlice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SummaryIntegerSlice::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.SummaryIntegerSlice.name)
}
inline std::string* SummaryIntegerSlice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:poplar.SummaryIntegerSlice.name)
  return _s;
}
inline const std::string& SummaryIntegerSlice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SummaryIntegerSlice::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SummaryIntegerSlice::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SummaryIntegerSlice::release_name() {
  // @@protoc_insertion_point(field_release:poplar.SummaryIntegerSlice.name)
  return _impl_.name_.Release();
}
inline void SummaryIntegerSlice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.SummaryIntegerSlice.name)
}

// repeated int64 value = 2;
inline int SummaryIntegerSlice::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int SummaryIntegerSlice::value_size() const {
  return _internal_value_size();
}
inline void SummaryIntegerSlice::clear_value() {
  _impl_.value_.Clear();
}
inline int64_t SummaryIntegerSlice::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline int64_t SummaryIntegerSlice::value(int index) const {
  // @@protoc_insertion_point(field_get:poplar.SummaryIntegerSlice.value)
  return _internal_value(index);
}
inline void SummaryIntegerSlice::set_value(int index, int64_t value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:poplar.SummaryIntegerSlice.value)
}
inline void SummaryIntegerSlice::_internal_add_value(int64_t value) {
  _impl_.value_.Add(value);
}
inline void SummaryIntegerSlice::add_value(int64_t value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:poplar.SummaryIntegerSlice.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SummaryIntegerSlice::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
SummaryIntegerSlice::value() const {
  // @@protoc_insertion_point(field_list:poplar.SummaryIntegerSlice.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SummaryIntegerSlice::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
SummaryIntegerSlice::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:poplar.SummaryIntegerSlice.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// SummaryInteger

// string name = 1;
inline void SummaryInteger::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SummaryInteger::name() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryInteger.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SummaryInteger::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.SummaryInteger.name)
}
inline std::string* SummaryInteger::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:poplar.SummaryInteger.name)
  return _s;
}
inline const std::string& SummaryInteger::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SummaryInteger::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SummaryInteger::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SummaryInteger::release_name() {
  // @@protoc_insertion_point(field_release:poplar.SummaryInteger.name)
  return _impl_.name_.Release();
}
inline void SummaryInteger::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.SummaryInteger.name)
}

// int64 value = 2;
inline void SummaryInteger::clear_value() {
  _impl_.value_ = int64_t{0};
}
inline int64_t SummaryInteger::_internal_value() const {
  return _impl_.value_;
}
inline int64_t SummaryInteger::value() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryInteger.value)
  return _internal_value();
}
inline void SummaryInteger::_internal_set_value(int64_t value) {
  
  _impl_.value_ = value;
}
inline void SummaryInteger::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:poplar.SummaryInteger.value)
}

// -------------------------------------------------------------------

// SummaryDoubleSlice

// string name = 1;
inline void SummaryDoubleSlice::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SummaryDoubleSlice::name() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryDoubleSlice.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SummaryDoubleSlice::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.SummaryDoubleSlice.name)
}
inline std::string* SummaryDoubleSlice::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:poplar.SummaryDoubleSlice.name)
  return _s;
}
inline const std::string& SummaryDoubleSlice::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SummaryDoubleSlice::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SummaryDoubleSlice::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SummaryDoubleSlice::release_name() {
  // @@protoc_insertion_point(field_release:poplar.SummaryDoubleSlice.name)
  return _impl_.name_.Release();
}
inline void SummaryDoubleSlice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.SummaryDoubleSlice.name)
}

// repeated double value = 2;
inline int SummaryDoubleSlice::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int SummaryDoubleSlice::value_size() const {
  return _internal_value_size();
}
inline void SummaryDoubleSlice::clear_value() {
  _impl_.value_.Clear();
}
inline double SummaryDoubleSlice::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline double SummaryDoubleSlice::value(int index) const {
  // @@protoc_insertion_point(field_get:poplar.SummaryDoubleSlice.value)
  return _internal_value(index);
}
inline void SummaryDoubleSlice::set_value(int index, double value) {
  _impl_.value_.Set(index, value);
  // @@protoc_insertion_point(field_set:poplar.SummaryDoubleSlice.value)
}
inline void SummaryDoubleSlice::_internal_add_value(double value) {
  _impl_.value_.Add(value);
}
inline void SummaryDoubleSlice::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:poplar.SummaryDoubleSlice.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryDoubleSlice::_internal_value() const {
  return _impl_.value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SummaryDoubleSlice::value() const {
  // @@protoc_insertion_point(field_list:poplar.SummaryDoubleSlice.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryDoubleSlice::_internal_mutable_value() {
  return &_impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SummaryDoubleSlice::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:poplar.SummaryDoubleSlice.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// SummaryDouble

// string name = 1;
inline void SummaryDouble::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SummaryDouble::name() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryDouble.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SummaryDouble::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.SummaryDouble.name)
}
inline std::string* SummaryDouble::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:poplar.SummaryDouble.name)
  return _s;
}
inline const std::string& SummaryDouble::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SummaryDouble::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SummaryDouble::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SummaryDouble::release_name() {
  // @@protoc_insertion_point(field_release:poplar.SummaryDouble.name)
  return _impl_.name_.Release();
}
inline void SummaryDouble::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.SummaryDouble.name)
}

// double value = 2;
inline void SummaryDouble::clear_value() {
  _impl_.value_ = 0;
}
inline double SummaryDouble::_internal_value() const {
  return _impl_.value_;
}
inline double SummaryDouble::value() const {
  // @@protoc_insertion_point(field_get:poplar.SummaryDouble.value)
  return _internal_value();
}
inline void SummaryDouble::_internal_set_value(double value) {
  
  _impl_.value_ = value;
}
inline void SummaryDouble::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:poplar.SummaryDouble.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace poplar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
