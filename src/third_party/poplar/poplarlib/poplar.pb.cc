// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poplar.proto

#include "poplar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace poplar {
PROTOBUF_CONSTEXPR PoplarID::PoplarID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PoplarIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoplarIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoplarIDDefaultTypeInternal() {}
  union {
    PoplarID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoplarIDDefaultTypeInternal _PoplarID_default_instance_;
PROTOBUF_CONSTEXPR CreateOptions::CreateOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chunksize_)*/0
  , /*decltype(_impl_.streaming_)*/false
  , /*decltype(_impl_.dynamic_)*/false
  , /*decltype(_impl_.buffered_)*/false
  , /*decltype(_impl_.recorder_)*/0
  , /*decltype(_impl_.events_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateOptionsDefaultTypeInternal() {}
  union {
    CreateOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateOptionsDefaultTypeInternal _CreateOptions_default_instance_;
PROTOBUF_CONSTEXPR PoplarResponse::PoplarResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PoplarResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoplarResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoplarResponseDefaultTypeInternal() {}
  union {
    PoplarResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoplarResponseDefaultTypeInternal _PoplarResponse_default_instance_;
}  // namespace poplar
static ::_pb::Metadata file_level_metadata_poplar_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_poplar_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_poplar_2eproto = nullptr;

const uint32_t TableStruct_poplar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarID, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _impl_.path_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _impl_.chunksize_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _impl_.streaming_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _impl_.dynamic_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _impl_.recorder_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::poplar::CreateOptions, _impl_.buffered_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarResponse, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::poplar::PoplarResponse, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::poplar::PoplarID)},
  { 7, -1, -1, sizeof(::poplar::CreateOptions)},
  { 21, -1, -1, sizeof(::poplar::PoplarResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::poplar::_PoplarID_default_instance_._instance,
  &::poplar::_CreateOptions_default_instance_._instance,
  &::poplar::_PoplarResponse_default_instance_._instance,
};

const char descriptor_table_protodef_poplar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014poplar.proto\022\006poplar\"\030\n\010PoplarID\022\014\n\004na"
  "me\030\001 \001(\t\"\227\005\n\rCreateOptions\022\014\n\004name\030\001 \001(\t"
  "\022\014\n\004path\030\002 \001(\t\022\021\n\tchunkSize\030\003 \001(\005\022\021\n\tstr"
  "eaming\030\004 \001(\010\022\017\n\007dynamic\030\005 \001(\010\0224\n\010recorde"
  "r\030\006 \001(\0162\".poplar.CreateOptions.RecorderT"
  "ype\0229\n\006events\030\007 \001(\0162).poplar.CreateOptio"
  "ns.EventsCollectorType\022\020\n\010buffered\030\010 \001(\010"
  "\"\265\001\n\014RecorderType\022\024\n\020UNKNOWN_RECORDER\020\000\022"
  "\010\n\004PERF\020\001\022\017\n\013PERF_SINGLE\020\002\022\016\n\nPERF_100MS"
  "\020\003\022\013\n\007PERF_1S\020\004\022\024\n\020HISTOGRAM_SINGLE\020\006\022\023\n"
  "\017HISTOGRAM_100MS\020\007\022\020\n\014HISTOGRAM_1S\020\010\022\032\n\026"
  "INTERVAL_SUMMARIZATION\020\t\"\367\001\n\023EventsColle"
  "ctorType\022\025\n\021UNKNOWN_COLLECTOR\020\000\022\t\n\005BASIC"
  "\020\001\022\017\n\013PASSTHROUGH\020\002\022\020\n\014SAMPLING_100\020\003\022\017\n"
  "\013SAMPLING_1K\020\004\022\020\n\014SAMPLING_10K\020\005\022\021\n\rSAMP"
  "LING_100K\020\006\022\024\n\020RAND_SAMPLING_50\020\007\022\024\n\020RAN"
  "D_SAMPLING_25\020\010\022\024\n\020RAND_SAMPLING_10\020\t\022\022\n"
  "\016INTERVAL_100MS\020\n\022\017\n\013INTERVAL_1S\020\013\".\n\016Po"
  "plarResponse\022\014\n\004name\030\001 \001(\t\022\016\n\006status\030\002 \001"
  "(\010B\nZ\010internalb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_poplar_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_poplar_2eproto = {
    false, false, 782, descriptor_table_protodef_poplar_2eproto,
    "poplar.proto",
    &descriptor_table_poplar_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_poplar_2eproto::offsets,
    file_level_metadata_poplar_2eproto, file_level_enum_descriptors_poplar_2eproto,
    file_level_service_descriptors_poplar_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_poplar_2eproto_getter() {
  return &descriptor_table_poplar_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_poplar_2eproto(&descriptor_table_poplar_2eproto);
namespace poplar {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateOptions_RecorderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_poplar_2eproto);
  return file_level_enum_descriptors_poplar_2eproto[0];
}
bool CreateOptions_RecorderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CreateOptions_RecorderType CreateOptions::UNKNOWN_RECORDER;
constexpr CreateOptions_RecorderType CreateOptions::PERF;
constexpr CreateOptions_RecorderType CreateOptions::PERF_SINGLE;
constexpr CreateOptions_RecorderType CreateOptions::PERF_100MS;
constexpr CreateOptions_RecorderType CreateOptions::PERF_1S;
constexpr CreateOptions_RecorderType CreateOptions::HISTOGRAM_SINGLE;
constexpr CreateOptions_RecorderType CreateOptions::HISTOGRAM_100MS;
constexpr CreateOptions_RecorderType CreateOptions::HISTOGRAM_1S;
constexpr CreateOptions_RecorderType CreateOptions::INTERVAL_SUMMARIZATION;
constexpr CreateOptions_RecorderType CreateOptions::RecorderType_MIN;
constexpr CreateOptions_RecorderType CreateOptions::RecorderType_MAX;
constexpr int CreateOptions::RecorderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateOptions_EventsCollectorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_poplar_2eproto);
  return file_level_enum_descriptors_poplar_2eproto[1];
}
bool CreateOptions_EventsCollectorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CreateOptions_EventsCollectorType CreateOptions::UNKNOWN_COLLECTOR;
constexpr CreateOptions_EventsCollectorType CreateOptions::BASIC;
constexpr CreateOptions_EventsCollectorType CreateOptions::PASSTHROUGH;
constexpr CreateOptions_EventsCollectorType CreateOptions::SAMPLING_100;
constexpr CreateOptions_EventsCollectorType CreateOptions::SAMPLING_1K;
constexpr CreateOptions_EventsCollectorType CreateOptions::SAMPLING_10K;
constexpr CreateOptions_EventsCollectorType CreateOptions::SAMPLING_100K;
constexpr CreateOptions_EventsCollectorType CreateOptions::RAND_SAMPLING_50;
constexpr CreateOptions_EventsCollectorType CreateOptions::RAND_SAMPLING_25;
constexpr CreateOptions_EventsCollectorType CreateOptions::RAND_SAMPLING_10;
constexpr CreateOptions_EventsCollectorType CreateOptions::INTERVAL_100MS;
constexpr CreateOptions_EventsCollectorType CreateOptions::INTERVAL_1S;
constexpr CreateOptions_EventsCollectorType CreateOptions::EventsCollectorType_MIN;
constexpr CreateOptions_EventsCollectorType CreateOptions::EventsCollectorType_MAX;
constexpr int CreateOptions::EventsCollectorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PoplarID::_Internal {
 public:
};

PoplarID::PoplarID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:poplar.PoplarID)
}
PoplarID::PoplarID(const PoplarID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PoplarID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:poplar.PoplarID)
}

inline void PoplarID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PoplarID::~PoplarID() {
  // @@protoc_insertion_point(destructor:poplar.PoplarID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoplarID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void PoplarID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PoplarID::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.PoplarID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoplarID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "poplar.PoplarID.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoplarID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.PoplarID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "poplar.PoplarID.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.PoplarID)
  return target;
}

size_t PoplarID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.PoplarID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoplarID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PoplarID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoplarID::GetClassData() const { return &_class_data_; }


void PoplarID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PoplarID*>(&to_msg);
  auto& from = static_cast<const PoplarID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:poplar.PoplarID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoplarID::CopyFrom(const PoplarID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.PoplarID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoplarID::IsInitialized() const {
  return true;
}

void PoplarID::InternalSwap(PoplarID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PoplarID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_poplar_2eproto_getter, &descriptor_table_poplar_2eproto_once,
      file_level_metadata_poplar_2eproto[0]);
}

// ===================================================================

class CreateOptions::_Internal {
 public:
};

CreateOptions::CreateOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:poplar.CreateOptions)
}
CreateOptions::CreateOptions(const CreateOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.chunksize_){}
    , decltype(_impl_.streaming_){}
    , decltype(_impl_.dynamic_){}
    , decltype(_impl_.buffered_){}
    , decltype(_impl_.recorder_){}
    , decltype(_impl_.events_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chunksize_, &from._impl_.chunksize_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.events_) -
    reinterpret_cast<char*>(&_impl_.chunksize_)) + sizeof(_impl_.events_));
  // @@protoc_insertion_point(copy_constructor:poplar.CreateOptions)
}

inline void CreateOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.path_){}
    , decltype(_impl_.chunksize_){0}
    , decltype(_impl_.streaming_){false}
    , decltype(_impl_.dynamic_){false}
    , decltype(_impl_.buffered_){false}
    , decltype(_impl_.recorder_){0}
    , decltype(_impl_.events_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateOptions::~CreateOptions() {
  // @@protoc_insertion_point(destructor:poplar.CreateOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.path_.Destroy();
}

void CreateOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.CreateOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.path_.ClearToEmpty();
  ::memset(&_impl_.chunksize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.events_) -
      reinterpret_cast<char*>(&_impl_.chunksize_)) + sizeof(_impl_.events_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "poplar.CreateOptions.name"));
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "poplar.CreateOptions.path"));
        } else
          goto handle_unusual;
        continue;
      // int32 chunkSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chunksize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool streaming = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.streaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dynamic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dynamic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .poplar.CreateOptions.RecorderType recorder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_recorder(static_cast<::poplar::CreateOptions_RecorderType>(val));
        } else
          goto handle_unusual;
        continue;
      // .poplar.CreateOptions.EventsCollectorType events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_events(static_cast<::poplar::CreateOptions_EventsCollectorType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool buffered = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.buffered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.CreateOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "poplar.CreateOptions.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "poplar.CreateOptions.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // int32 chunkSize = 3;
  if (this->_internal_chunksize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_chunksize(), target);
  }

  // bool streaming = 4;
  if (this->_internal_streaming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_streaming(), target);
  }

  // bool dynamic = 5;
  if (this->_internal_dynamic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_dynamic(), target);
  }

  // .poplar.CreateOptions.RecorderType recorder = 6;
  if (this->_internal_recorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_recorder(), target);
  }

  // .poplar.CreateOptions.EventsCollectorType events = 7;
  if (this->_internal_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_events(), target);
  }

  // bool buffered = 8;
  if (this->_internal_buffered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_buffered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.CreateOptions)
  return target;
}

size_t CreateOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.CreateOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 chunkSize = 3;
  if (this->_internal_chunksize() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chunksize());
  }

  // bool streaming = 4;
  if (this->_internal_streaming() != 0) {
    total_size += 1 + 1;
  }

  // bool dynamic = 5;
  if (this->_internal_dynamic() != 0) {
    total_size += 1 + 1;
  }

  // bool buffered = 8;
  if (this->_internal_buffered() != 0) {
    total_size += 1 + 1;
  }

  // .poplar.CreateOptions.RecorderType recorder = 6;
  if (this->_internal_recorder() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_recorder());
  }

  // .poplar.CreateOptions.EventsCollectorType events = 7;
  if (this->_internal_events() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_events());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateOptions::GetClassData() const { return &_class_data_; }


void CreateOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateOptions*>(&to_msg);
  auto& from = static_cast<const CreateOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:poplar.CreateOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_chunksize() != 0) {
    _this->_internal_set_chunksize(from._internal_chunksize());
  }
  if (from._internal_streaming() != 0) {
    _this->_internal_set_streaming(from._internal_streaming());
  }
  if (from._internal_dynamic() != 0) {
    _this->_internal_set_dynamic(from._internal_dynamic());
  }
  if (from._internal_buffered() != 0) {
    _this->_internal_set_buffered(from._internal_buffered());
  }
  if (from._internal_recorder() != 0) {
    _this->_internal_set_recorder(from._internal_recorder());
  }
  if (from._internal_events() != 0) {
    _this->_internal_set_events(from._internal_events());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateOptions::CopyFrom(const CreateOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.CreateOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateOptions::IsInitialized() const {
  return true;
}

void CreateOptions::InternalSwap(CreateOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateOptions, _impl_.events_)
      + sizeof(CreateOptions::_impl_.events_)
      - PROTOBUF_FIELD_OFFSET(CreateOptions, _impl_.chunksize_)>(
          reinterpret_cast<char*>(&_impl_.chunksize_),
          reinterpret_cast<char*>(&other->_impl_.chunksize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_poplar_2eproto_getter, &descriptor_table_poplar_2eproto_once,
      file_level_metadata_poplar_2eproto[1]);
}

// ===================================================================

class PoplarResponse::_Internal {
 public:
};

PoplarResponse::PoplarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:poplar.PoplarResponse)
}
PoplarResponse::PoplarResponse(const PoplarResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PoplarResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:poplar.PoplarResponse)
}

inline void PoplarResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PoplarResponse::~PoplarResponse() {
  // @@protoc_insertion_point(destructor:poplar.PoplarResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoplarResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void PoplarResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PoplarResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:poplar.PoplarResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoplarResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "poplar.PoplarResponse.name"));
        } else
          goto handle_unusual;
        continue;
      // bool status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoplarResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:poplar.PoplarResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "poplar.PoplarResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poplar.PoplarResponse)
  return target;
}

size_t PoplarResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:poplar.PoplarResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoplarResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PoplarResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoplarResponse::GetClassData() const { return &_class_data_; }


void PoplarResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PoplarResponse*>(&to_msg);
  auto& from = static_cast<const PoplarResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:poplar.PoplarResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoplarResponse::CopyFrom(const PoplarResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:poplar.PoplarResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoplarResponse::IsInitialized() const {
  return true;
}

void PoplarResponse::InternalSwap(PoplarResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoplarResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_poplar_2eproto_getter, &descriptor_table_poplar_2eproto_once,
      file_level_metadata_poplar_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace poplar
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::poplar::PoplarID*
Arena::CreateMaybeMessage< ::poplar::PoplarID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::poplar::PoplarID >(arena);
}
template<> PROTOBUF_NOINLINE ::poplar::CreateOptions*
Arena::CreateMaybeMessage< ::poplar::CreateOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::poplar::CreateOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::poplar::PoplarResponse*
Arena::CreateMaybeMessage< ::poplar::PoplarResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::poplar::PoplarResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
