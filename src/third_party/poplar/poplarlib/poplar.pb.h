// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: poplar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_poplar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_poplar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_poplar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_poplar_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_poplar_2eproto;
namespace poplar {
class CreateOptions;
struct CreateOptionsDefaultTypeInternal;
extern CreateOptionsDefaultTypeInternal _CreateOptions_default_instance_;
class PoplarID;
struct PoplarIDDefaultTypeInternal;
extern PoplarIDDefaultTypeInternal _PoplarID_default_instance_;
class PoplarResponse;
struct PoplarResponseDefaultTypeInternal;
extern PoplarResponseDefaultTypeInternal _PoplarResponse_default_instance_;
}  // namespace poplar
PROTOBUF_NAMESPACE_OPEN
template<> ::poplar::CreateOptions* Arena::CreateMaybeMessage<::poplar::CreateOptions>(Arena*);
template<> ::poplar::PoplarID* Arena::CreateMaybeMessage<::poplar::PoplarID>(Arena*);
template<> ::poplar::PoplarResponse* Arena::CreateMaybeMessage<::poplar::PoplarResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace poplar {

enum CreateOptions_RecorderType : int {
  CreateOptions_RecorderType_UNKNOWN_RECORDER = 0,
  CreateOptions_RecorderType_PERF = 1,
  CreateOptions_RecorderType_PERF_SINGLE = 2,
  CreateOptions_RecorderType_PERF_100MS = 3,
  CreateOptions_RecorderType_PERF_1S = 4,
  CreateOptions_RecorderType_HISTOGRAM_SINGLE = 6,
  CreateOptions_RecorderType_HISTOGRAM_100MS = 7,
  CreateOptions_RecorderType_HISTOGRAM_1S = 8,
  CreateOptions_RecorderType_INTERVAL_SUMMARIZATION = 9,
  CreateOptions_RecorderType_CreateOptions_RecorderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreateOptions_RecorderType_CreateOptions_RecorderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreateOptions_RecorderType_IsValid(int value);
constexpr CreateOptions_RecorderType CreateOptions_RecorderType_RecorderType_MIN = CreateOptions_RecorderType_UNKNOWN_RECORDER;
constexpr CreateOptions_RecorderType CreateOptions_RecorderType_RecorderType_MAX = CreateOptions_RecorderType_INTERVAL_SUMMARIZATION;
constexpr int CreateOptions_RecorderType_RecorderType_ARRAYSIZE = CreateOptions_RecorderType_RecorderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateOptions_RecorderType_descriptor();
template<typename T>
inline const std::string& CreateOptions_RecorderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateOptions_RecorderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateOptions_RecorderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateOptions_RecorderType_descriptor(), enum_t_value);
}
inline bool CreateOptions_RecorderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateOptions_RecorderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateOptions_RecorderType>(
    CreateOptions_RecorderType_descriptor(), name, value);
}
enum CreateOptions_EventsCollectorType : int {
  CreateOptions_EventsCollectorType_UNKNOWN_COLLECTOR = 0,
  CreateOptions_EventsCollectorType_BASIC = 1,
  CreateOptions_EventsCollectorType_PASSTHROUGH = 2,
  CreateOptions_EventsCollectorType_SAMPLING_100 = 3,
  CreateOptions_EventsCollectorType_SAMPLING_1K = 4,
  CreateOptions_EventsCollectorType_SAMPLING_10K = 5,
  CreateOptions_EventsCollectorType_SAMPLING_100K = 6,
  CreateOptions_EventsCollectorType_RAND_SAMPLING_50 = 7,
  CreateOptions_EventsCollectorType_RAND_SAMPLING_25 = 8,
  CreateOptions_EventsCollectorType_RAND_SAMPLING_10 = 9,
  CreateOptions_EventsCollectorType_INTERVAL_100MS = 10,
  CreateOptions_EventsCollectorType_INTERVAL_1S = 11,
  CreateOptions_EventsCollectorType_CreateOptions_EventsCollectorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreateOptions_EventsCollectorType_CreateOptions_EventsCollectorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreateOptions_EventsCollectorType_IsValid(int value);
constexpr CreateOptions_EventsCollectorType CreateOptions_EventsCollectorType_EventsCollectorType_MIN = CreateOptions_EventsCollectorType_UNKNOWN_COLLECTOR;
constexpr CreateOptions_EventsCollectorType CreateOptions_EventsCollectorType_EventsCollectorType_MAX = CreateOptions_EventsCollectorType_INTERVAL_1S;
constexpr int CreateOptions_EventsCollectorType_EventsCollectorType_ARRAYSIZE = CreateOptions_EventsCollectorType_EventsCollectorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateOptions_EventsCollectorType_descriptor();
template<typename T>
inline const std::string& CreateOptions_EventsCollectorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateOptions_EventsCollectorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateOptions_EventsCollectorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateOptions_EventsCollectorType_descriptor(), enum_t_value);
}
inline bool CreateOptions_EventsCollectorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateOptions_EventsCollectorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateOptions_EventsCollectorType>(
    CreateOptions_EventsCollectorType_descriptor(), name, value);
}
// ===================================================================

class PoplarID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.PoplarID) */ {
 public:
  inline PoplarID() : PoplarID(nullptr) {}
  ~PoplarID() override;
  explicit PROTOBUF_CONSTEXPR PoplarID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoplarID(const PoplarID& from);
  PoplarID(PoplarID&& from) noexcept
    : PoplarID() {
    *this = ::std::move(from);
  }

  inline PoplarID& operator=(const PoplarID& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoplarID& operator=(PoplarID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoplarID& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoplarID* internal_default_instance() {
    return reinterpret_cast<const PoplarID*>(
               &_PoplarID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PoplarID& a, PoplarID& b) {
    a.Swap(&b);
  }
  inline void Swap(PoplarID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoplarID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoplarID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoplarID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoplarID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoplarID& from) {
    PoplarID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoplarID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.PoplarID";
  }
  protected:
  explicit PoplarID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:poplar.PoplarID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_poplar_2eproto;
};
// -------------------------------------------------------------------

class CreateOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.CreateOptions) */ {
 public:
  inline CreateOptions() : CreateOptions(nullptr) {}
  ~CreateOptions() override;
  explicit PROTOBUF_CONSTEXPR CreateOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateOptions(const CreateOptions& from);
  CreateOptions(CreateOptions&& from) noexcept
    : CreateOptions() {
    *this = ::std::move(from);
  }

  inline CreateOptions& operator=(const CreateOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateOptions& operator=(CreateOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateOptions* internal_default_instance() {
    return reinterpret_cast<const CreateOptions*>(
               &_CreateOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateOptions& a, CreateOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateOptions& from) {
    CreateOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.CreateOptions";
  }
  protected:
  explicit CreateOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateOptions_RecorderType RecorderType;
  static constexpr RecorderType UNKNOWN_RECORDER =
    CreateOptions_RecorderType_UNKNOWN_RECORDER;
  static constexpr RecorderType PERF =
    CreateOptions_RecorderType_PERF;
  static constexpr RecorderType PERF_SINGLE =
    CreateOptions_RecorderType_PERF_SINGLE;
  static constexpr RecorderType PERF_100MS =
    CreateOptions_RecorderType_PERF_100MS;
  static constexpr RecorderType PERF_1S =
    CreateOptions_RecorderType_PERF_1S;
  static constexpr RecorderType HISTOGRAM_SINGLE =
    CreateOptions_RecorderType_HISTOGRAM_SINGLE;
  static constexpr RecorderType HISTOGRAM_100MS =
    CreateOptions_RecorderType_HISTOGRAM_100MS;
  static constexpr RecorderType HISTOGRAM_1S =
    CreateOptions_RecorderType_HISTOGRAM_1S;
  static constexpr RecorderType INTERVAL_SUMMARIZATION =
    CreateOptions_RecorderType_INTERVAL_SUMMARIZATION;
  static inline bool RecorderType_IsValid(int value) {
    return CreateOptions_RecorderType_IsValid(value);
  }
  static constexpr RecorderType RecorderType_MIN =
    CreateOptions_RecorderType_RecorderType_MIN;
  static constexpr RecorderType RecorderType_MAX =
    CreateOptions_RecorderType_RecorderType_MAX;
  static constexpr int RecorderType_ARRAYSIZE =
    CreateOptions_RecorderType_RecorderType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RecorderType_descriptor() {
    return CreateOptions_RecorderType_descriptor();
  }
  template<typename T>
  static inline const std::string& RecorderType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RecorderType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RecorderType_Name.");
    return CreateOptions_RecorderType_Name(enum_t_value);
  }
  static inline bool RecorderType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RecorderType* value) {
    return CreateOptions_RecorderType_Parse(name, value);
  }

  typedef CreateOptions_EventsCollectorType EventsCollectorType;
  static constexpr EventsCollectorType UNKNOWN_COLLECTOR =
    CreateOptions_EventsCollectorType_UNKNOWN_COLLECTOR;
  static constexpr EventsCollectorType BASIC =
    CreateOptions_EventsCollectorType_BASIC;
  static constexpr EventsCollectorType PASSTHROUGH =
    CreateOptions_EventsCollectorType_PASSTHROUGH;
  static constexpr EventsCollectorType SAMPLING_100 =
    CreateOptions_EventsCollectorType_SAMPLING_100;
  static constexpr EventsCollectorType SAMPLING_1K =
    CreateOptions_EventsCollectorType_SAMPLING_1K;
  static constexpr EventsCollectorType SAMPLING_10K =
    CreateOptions_EventsCollectorType_SAMPLING_10K;
  static constexpr EventsCollectorType SAMPLING_100K =
    CreateOptions_EventsCollectorType_SAMPLING_100K;
  static constexpr EventsCollectorType RAND_SAMPLING_50 =
    CreateOptions_EventsCollectorType_RAND_SAMPLING_50;
  static constexpr EventsCollectorType RAND_SAMPLING_25 =
    CreateOptions_EventsCollectorType_RAND_SAMPLING_25;
  static constexpr EventsCollectorType RAND_SAMPLING_10 =
    CreateOptions_EventsCollectorType_RAND_SAMPLING_10;
  static constexpr EventsCollectorType INTERVAL_100MS =
    CreateOptions_EventsCollectorType_INTERVAL_100MS;
  static constexpr EventsCollectorType INTERVAL_1S =
    CreateOptions_EventsCollectorType_INTERVAL_1S;
  static inline bool EventsCollectorType_IsValid(int value) {
    return CreateOptions_EventsCollectorType_IsValid(value);
  }
  static constexpr EventsCollectorType EventsCollectorType_MIN =
    CreateOptions_EventsCollectorType_EventsCollectorType_MIN;
  static constexpr EventsCollectorType EventsCollectorType_MAX =
    CreateOptions_EventsCollectorType_EventsCollectorType_MAX;
  static constexpr int EventsCollectorType_ARRAYSIZE =
    CreateOptions_EventsCollectorType_EventsCollectorType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventsCollectorType_descriptor() {
    return CreateOptions_EventsCollectorType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventsCollectorType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventsCollectorType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventsCollectorType_Name.");
    return CreateOptions_EventsCollectorType_Name(enum_t_value);
  }
  static inline bool EventsCollectorType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventsCollectorType* value) {
    return CreateOptions_EventsCollectorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kChunkSizeFieldNumber = 3,
    kStreamingFieldNumber = 4,
    kDynamicFieldNumber = 5,
    kBufferedFieldNumber = 8,
    kRecorderFieldNumber = 6,
    kEventsFieldNumber = 7,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 chunkSize = 3;
  void clear_chunksize();
  int32_t chunksize() const;
  void set_chunksize(int32_t value);
  private:
  int32_t _internal_chunksize() const;
  void _internal_set_chunksize(int32_t value);
  public:

  // bool streaming = 4;
  void clear_streaming();
  bool streaming() const;
  void set_streaming(bool value);
  private:
  bool _internal_streaming() const;
  void _internal_set_streaming(bool value);
  public:

  // bool dynamic = 5;
  void clear_dynamic();
  bool dynamic() const;
  void set_dynamic(bool value);
  private:
  bool _internal_dynamic() const;
  void _internal_set_dynamic(bool value);
  public:

  // bool buffered = 8;
  void clear_buffered();
  bool buffered() const;
  void set_buffered(bool value);
  private:
  bool _internal_buffered() const;
  void _internal_set_buffered(bool value);
  public:

  // .poplar.CreateOptions.RecorderType recorder = 6;
  void clear_recorder();
  ::poplar::CreateOptions_RecorderType recorder() const;
  void set_recorder(::poplar::CreateOptions_RecorderType value);
  private:
  ::poplar::CreateOptions_RecorderType _internal_recorder() const;
  void _internal_set_recorder(::poplar::CreateOptions_RecorderType value);
  public:

  // .poplar.CreateOptions.EventsCollectorType events = 7;
  void clear_events();
  ::poplar::CreateOptions_EventsCollectorType events() const;
  void set_events(::poplar::CreateOptions_EventsCollectorType value);
  private:
  ::poplar::CreateOptions_EventsCollectorType _internal_events() const;
  void _internal_set_events(::poplar::CreateOptions_EventsCollectorType value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.CreateOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    int32_t chunksize_;
    bool streaming_;
    bool dynamic_;
    bool buffered_;
    int recorder_;
    int events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_poplar_2eproto;
};
// -------------------------------------------------------------------

class PoplarResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.PoplarResponse) */ {
 public:
  inline PoplarResponse() : PoplarResponse(nullptr) {}
  ~PoplarResponse() override;
  explicit PROTOBUF_CONSTEXPR PoplarResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoplarResponse(const PoplarResponse& from);
  PoplarResponse(PoplarResponse&& from) noexcept
    : PoplarResponse() {
    *this = ::std::move(from);
  }

  inline PoplarResponse& operator=(const PoplarResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoplarResponse& operator=(PoplarResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoplarResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoplarResponse* internal_default_instance() {
    return reinterpret_cast<const PoplarResponse*>(
               &_PoplarResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PoplarResponse& a, PoplarResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PoplarResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoplarResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoplarResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoplarResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoplarResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoplarResponse& from) {
    PoplarResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoplarResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.PoplarResponse";
  }
  protected:
  explicit PoplarResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool status = 2;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.PoplarResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_poplar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PoplarID

// string name = 1;
inline void PoplarID::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PoplarID::name() const {
  // @@protoc_insertion_point(field_get:poplar.PoplarID.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PoplarID::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.PoplarID.name)
}
inline std::string* PoplarID::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:poplar.PoplarID.name)
  return _s;
}
inline const std::string& PoplarID::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PoplarID::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PoplarID::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PoplarID::release_name() {
  // @@protoc_insertion_point(field_release:poplar.PoplarID.name)
  return _impl_.name_.Release();
}
inline void PoplarID::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.PoplarID.name)
}

// -------------------------------------------------------------------

// CreateOptions

// string name = 1;
inline void CreateOptions::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateOptions::name() const {
  // @@protoc_insertion_point(field_get:poplar.CreateOptions.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOptions::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.CreateOptions.name)
}
inline std::string* CreateOptions::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:poplar.CreateOptions.name)
  return _s;
}
inline const std::string& CreateOptions::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateOptions::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateOptions::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateOptions::release_name() {
  // @@protoc_insertion_point(field_release:poplar.CreateOptions.name)
  return _impl_.name_.Release();
}
inline void CreateOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.CreateOptions.name)
}

// string path = 2;
inline void CreateOptions::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& CreateOptions::path() const {
  // @@protoc_insertion_point(field_get:poplar.CreateOptions.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateOptions::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.CreateOptions.path)
}
inline std::string* CreateOptions::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:poplar.CreateOptions.path)
  return _s;
}
inline const std::string& CreateOptions::_internal_path() const {
  return _impl_.path_.Get();
}
inline void CreateOptions::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateOptions::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateOptions::release_path() {
  // @@protoc_insertion_point(field_release:poplar.CreateOptions.path)
  return _impl_.path_.Release();
}
inline void CreateOptions::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.CreateOptions.path)
}

// int32 chunkSize = 3;
inline void CreateOptions::clear_chunksize() {
  _impl_.chunksize_ = 0;
}
inline int32_t CreateOptions::_internal_chunksize() const {
  return _impl_.chunksize_;
}
inline int32_t CreateOptions::chunksize() const {
  // @@protoc_insertion_point(field_get:poplar.CreateOptions.chunkSize)
  return _internal_chunksize();
}
inline void CreateOptions::_internal_set_chunksize(int32_t value) {
  
  _impl_.chunksize_ = value;
}
inline void CreateOptions::set_chunksize(int32_t value) {
  _internal_set_chunksize(value);
  // @@protoc_insertion_point(field_set:poplar.CreateOptions.chunkSize)
}

// bool streaming = 4;
inline void CreateOptions::clear_streaming() {
  _impl_.streaming_ = false;
}
inline bool CreateOptions::_internal_streaming() const {
  return _impl_.streaming_;
}
inline bool CreateOptions::streaming() const {
  // @@protoc_insertion_point(field_get:poplar.CreateOptions.streaming)
  return _internal_streaming();
}
inline void CreateOptions::_internal_set_streaming(bool value) {
  
  _impl_.streaming_ = value;
}
inline void CreateOptions::set_streaming(bool value) {
  _internal_set_streaming(value);
  // @@protoc_insertion_point(field_set:poplar.CreateOptions.streaming)
}

// bool dynamic = 5;
inline void CreateOptions::clear_dynamic() {
  _impl_.dynamic_ = false;
}
inline bool CreateOptions::_internal_dynamic() const {
  return _impl_.dynamic_;
}
inline bool CreateOptions::dynamic() const {
  // @@protoc_insertion_point(field_get:poplar.CreateOptions.dynamic)
  return _internal_dynamic();
}
inline void CreateOptions::_internal_set_dynamic(bool value) {
  
  _impl_.dynamic_ = value;
}
inline void CreateOptions::set_dynamic(bool value) {
  _internal_set_dynamic(value);
  // @@protoc_insertion_point(field_set:poplar.CreateOptions.dynamic)
}

// .poplar.CreateOptions.RecorderType recorder = 6;
inline void CreateOptions::clear_recorder() {
  _impl_.recorder_ = 0;
}
inline ::poplar::CreateOptions_RecorderType CreateOptions::_internal_recorder() const {
  return static_cast< ::poplar::CreateOptions_RecorderType >(_impl_.recorder_);
}
inline ::poplar::CreateOptions_RecorderType CreateOptions::recorder() const {
  // @@protoc_insertion_point(field_get:poplar.CreateOptions.recorder)
  return _internal_recorder();
}
inline void CreateOptions::_internal_set_recorder(::poplar::CreateOptions_RecorderType value) {
  
  _impl_.recorder_ = value;
}
inline void CreateOptions::set_recorder(::poplar::CreateOptions_RecorderType value) {
  _internal_set_recorder(value);
  // @@protoc_insertion_point(field_set:poplar.CreateOptions.recorder)
}

// .poplar.CreateOptions.EventsCollectorType events = 7;
inline void CreateOptions::clear_events() {
  _impl_.events_ = 0;
}
inline ::poplar::CreateOptions_EventsCollectorType CreateOptions::_internal_events() const {
  return static_cast< ::poplar::CreateOptions_EventsCollectorType >(_impl_.events_);
}
inline ::poplar::CreateOptions_EventsCollectorType CreateOptions::events() const {
  // @@protoc_insertion_point(field_get:poplar.CreateOptions.events)
  return _internal_events();
}
inline void CreateOptions::_internal_set_events(::poplar::CreateOptions_EventsCollectorType value) {
  
  _impl_.events_ = value;
}
inline void CreateOptions::set_events(::poplar::CreateOptions_EventsCollectorType value) {
  _internal_set_events(value);
  // @@protoc_insertion_point(field_set:poplar.CreateOptions.events)
}

// bool buffered = 8;
inline void CreateOptions::clear_buffered() {
  _impl_.buffered_ = false;
}
inline bool CreateOptions::_internal_buffered() const {
  return _impl_.buffered_;
}
inline bool CreateOptions::buffered() const {
  // @@protoc_insertion_point(field_get:poplar.CreateOptions.buffered)
  return _internal_buffered();
}
inline void CreateOptions::_internal_set_buffered(bool value) {
  
  _impl_.buffered_ = value;
}
inline void CreateOptions::set_buffered(bool value) {
  _internal_set_buffered(value);
  // @@protoc_insertion_point(field_set:poplar.CreateOptions.buffered)
}

// -------------------------------------------------------------------

// PoplarResponse

// string name = 1;
inline void PoplarResponse::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PoplarResponse::name() const {
  // @@protoc_insertion_point(field_get:poplar.PoplarResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PoplarResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.PoplarResponse.name)
}
inline std::string* PoplarResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:poplar.PoplarResponse.name)
  return _s;
}
inline const std::string& PoplarResponse::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PoplarResponse::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PoplarResponse::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PoplarResponse::release_name() {
  // @@protoc_insertion_point(field_release:poplar.PoplarResponse.name)
  return _impl_.name_.Release();
}
inline void PoplarResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.PoplarResponse.name)
}

// bool status = 2;
inline void PoplarResponse::clear_status() {
  _impl_.status_ = false;
}
inline bool PoplarResponse::_internal_status() const {
  return _impl_.status_;
}
inline bool PoplarResponse::status() const {
  // @@protoc_insertion_point(field_get:poplar.PoplarResponse.status)
  return _internal_status();
}
inline void PoplarResponse::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void PoplarResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:poplar.PoplarResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace poplar

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::poplar::CreateOptions_RecorderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::poplar::CreateOptions_RecorderType>() {
  return ::poplar::CreateOptions_RecorderType_descriptor();
}
template <> struct is_proto_enum< ::poplar::CreateOptions_EventsCollectorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::poplar::CreateOptions_EventsCollectorType>() {
  return ::poplar::CreateOptions_EventsCollectorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_poplar_2eproto
