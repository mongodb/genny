// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_collector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_collector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "poplar.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_collector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_collector_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_collector_2eproto;
namespace poplar {
class CollectorName;
struct CollectorNameDefaultTypeInternal;
extern CollectorNameDefaultTypeInternal _CollectorName_default_instance_;
class EventMetrics;
struct EventMetricsDefaultTypeInternal;
extern EventMetricsDefaultTypeInternal _EventMetrics_default_instance_;
class EventMetricsCounters;
struct EventMetricsCountersDefaultTypeInternal;
extern EventMetricsCountersDefaultTypeInternal _EventMetricsCounters_default_instance_;
class EventMetricsGauges;
struct EventMetricsGaugesDefaultTypeInternal;
extern EventMetricsGaugesDefaultTypeInternal _EventMetricsGauges_default_instance_;
class EventMetricsTimers;
struct EventMetricsTimersDefaultTypeInternal;
extern EventMetricsTimersDefaultTypeInternal _EventMetricsTimers_default_instance_;
}  // namespace poplar
PROTOBUF_NAMESPACE_OPEN
template<> ::poplar::CollectorName* Arena::CreateMaybeMessage<::poplar::CollectorName>(Arena*);
template<> ::poplar::EventMetrics* Arena::CreateMaybeMessage<::poplar::EventMetrics>(Arena*);
template<> ::poplar::EventMetricsCounters* Arena::CreateMaybeMessage<::poplar::EventMetricsCounters>(Arena*);
template<> ::poplar::EventMetricsGauges* Arena::CreateMaybeMessage<::poplar::EventMetricsGauges>(Arena*);
template<> ::poplar::EventMetricsTimers* Arena::CreateMaybeMessage<::poplar::EventMetricsTimers>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace poplar {

// ===================================================================

class CollectorName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.CollectorName) */ {
 public:
  inline CollectorName() : CollectorName(nullptr) {}
  ~CollectorName() override;
  explicit PROTOBUF_CONSTEXPR CollectorName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollectorName(const CollectorName& from);
  CollectorName(CollectorName&& from) noexcept
    : CollectorName() {
    *this = ::std::move(from);
  }

  inline CollectorName& operator=(const CollectorName& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectorName& operator=(CollectorName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollectorName& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollectorName* internal_default_instance() {
    return reinterpret_cast<const CollectorName*>(
               &_CollectorName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CollectorName& a, CollectorName& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectorName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollectorName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollectorName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollectorName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollectorName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollectorName& from) {
    CollectorName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectorName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.CollectorName";
  }
  protected:
  explicit CollectorName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:poplar.CollectorName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class EventMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.EventMetrics) */ {
 public:
  inline EventMetrics() : EventMetrics(nullptr) {}
  ~EventMetrics() override;
  explicit PROTOBUF_CONSTEXPR EventMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventMetrics(const EventMetrics& from);
  EventMetrics(EventMetrics&& from) noexcept
    : EventMetrics() {
    *this = ::std::move(from);
  }

  inline EventMetrics& operator=(const EventMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetrics& operator=(EventMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMetrics* internal_default_instance() {
    return reinterpret_cast<const EventMetrics*>(
               &_EventMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventMetrics& a, EventMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventMetrics& from) {
    EventMetrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.EventMetrics";
  }
  protected:
  explicit EventMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeFieldNumber = 2,
    kCountersFieldNumber = 4,
    kTimersFieldNumber = 5,
    kGaugesFieldNumber = 6,
    kIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .poplar.EventMetricsCounters counters = 4;
  bool has_counters() const;
  private:
  bool _internal_has_counters() const;
  public:
  void clear_counters();
  const ::poplar::EventMetricsCounters& counters() const;
  PROTOBUF_NODISCARD ::poplar::EventMetricsCounters* release_counters();
  ::poplar::EventMetricsCounters* mutable_counters();
  void set_allocated_counters(::poplar::EventMetricsCounters* counters);
  private:
  const ::poplar::EventMetricsCounters& _internal_counters() const;
  ::poplar::EventMetricsCounters* _internal_mutable_counters();
  public:
  void unsafe_arena_set_allocated_counters(
      ::poplar::EventMetricsCounters* counters);
  ::poplar::EventMetricsCounters* unsafe_arena_release_counters();

  // .poplar.EventMetricsTimers timers = 5;
  bool has_timers() const;
  private:
  bool _internal_has_timers() const;
  public:
  void clear_timers();
  const ::poplar::EventMetricsTimers& timers() const;
  PROTOBUF_NODISCARD ::poplar::EventMetricsTimers* release_timers();
  ::poplar::EventMetricsTimers* mutable_timers();
  void set_allocated_timers(::poplar::EventMetricsTimers* timers);
  private:
  const ::poplar::EventMetricsTimers& _internal_timers() const;
  ::poplar::EventMetricsTimers* _internal_mutable_timers();
  public:
  void unsafe_arena_set_allocated_timers(
      ::poplar::EventMetricsTimers* timers);
  ::poplar::EventMetricsTimers* unsafe_arena_release_timers();

  // .poplar.EventMetricsGauges gauges = 6;
  bool has_gauges() const;
  private:
  bool _internal_has_gauges() const;
  public:
  void clear_gauges();
  const ::poplar::EventMetricsGauges& gauges() const;
  PROTOBUF_NODISCARD ::poplar::EventMetricsGauges* release_gauges();
  ::poplar::EventMetricsGauges* mutable_gauges();
  void set_allocated_gauges(::poplar::EventMetricsGauges* gauges);
  private:
  const ::poplar::EventMetricsGauges& _internal_gauges() const;
  ::poplar::EventMetricsGauges* _internal_mutable_gauges();
  public:
  void unsafe_arena_set_allocated_gauges(
      ::poplar::EventMetricsGauges* gauges);
  ::poplar::EventMetricsGauges* unsafe_arena_release_gauges();

  // int64 id = 3;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.EventMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::poplar::EventMetricsCounters* counters_;
    ::poplar::EventMetricsTimers* timers_;
    ::poplar::EventMetricsGauges* gauges_;
    int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class EventMetricsCounters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.EventMetricsCounters) */ {
 public:
  inline EventMetricsCounters() : EventMetricsCounters(nullptr) {}
  ~EventMetricsCounters() override;
  explicit PROTOBUF_CONSTEXPR EventMetricsCounters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventMetricsCounters(const EventMetricsCounters& from);
  EventMetricsCounters(EventMetricsCounters&& from) noexcept
    : EventMetricsCounters() {
    *this = ::std::move(from);
  }

  inline EventMetricsCounters& operator=(const EventMetricsCounters& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetricsCounters& operator=(EventMetricsCounters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventMetricsCounters& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMetricsCounters* internal_default_instance() {
    return reinterpret_cast<const EventMetricsCounters*>(
               &_EventMetricsCounters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventMetricsCounters& a, EventMetricsCounters& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetricsCounters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMetricsCounters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventMetricsCounters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventMetricsCounters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventMetricsCounters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventMetricsCounters& from) {
    EventMetricsCounters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetricsCounters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.EventMetricsCounters";
  }
  protected:
  explicit EventMetricsCounters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
    kOpsFieldNumber = 2,
    kSizeFieldNumber = 3,
    kErrorsFieldNumber = 4,
  };
  // int64 number = 1;
  void clear_number();
  int64_t number() const;
  void set_number(int64_t value);
  private:
  int64_t _internal_number() const;
  void _internal_set_number(int64_t value);
  public:

  // int64 ops = 2;
  void clear_ops();
  int64_t ops() const;
  void set_ops(int64_t value);
  private:
  int64_t _internal_ops() const;
  void _internal_set_ops(int64_t value);
  public:

  // int64 size = 3;
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // int64 errors = 4;
  void clear_errors();
  int64_t errors() const;
  void set_errors(int64_t value);
  private:
  int64_t _internal_errors() const;
  void _internal_set_errors(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.EventMetricsCounters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t number_;
    int64_t ops_;
    int64_t size_;
    int64_t errors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class EventMetricsTimers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.EventMetricsTimers) */ {
 public:
  inline EventMetricsTimers() : EventMetricsTimers(nullptr) {}
  ~EventMetricsTimers() override;
  explicit PROTOBUF_CONSTEXPR EventMetricsTimers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventMetricsTimers(const EventMetricsTimers& from);
  EventMetricsTimers(EventMetricsTimers&& from) noexcept
    : EventMetricsTimers() {
    *this = ::std::move(from);
  }

  inline EventMetricsTimers& operator=(const EventMetricsTimers& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetricsTimers& operator=(EventMetricsTimers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventMetricsTimers& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMetricsTimers* internal_default_instance() {
    return reinterpret_cast<const EventMetricsTimers*>(
               &_EventMetricsTimers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EventMetricsTimers& a, EventMetricsTimers& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetricsTimers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMetricsTimers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventMetricsTimers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventMetricsTimers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventMetricsTimers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventMetricsTimers& from) {
    EventMetricsTimers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetricsTimers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.EventMetricsTimers";
  }
  protected:
  explicit EventMetricsTimers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // .google.protobuf.Duration total = 1;
  bool has_total() const;
  private:
  bool _internal_has_total() const;
  public:
  void clear_total();
  const ::PROTOBUF_NAMESPACE_ID::Duration& total() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_total();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_total();
  void set_allocated_total(::PROTOBUF_NAMESPACE_ID::Duration* total);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_total() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_total();
  public:
  void unsafe_arena_set_allocated_total(
      ::PROTOBUF_NAMESPACE_ID::Duration* total);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_total();

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // @@protoc_insertion_point(class_scope:poplar.EventMetricsTimers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Duration* total_;
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class EventMetricsGauges final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:poplar.EventMetricsGauges) */ {
 public:
  inline EventMetricsGauges() : EventMetricsGauges(nullptr) {}
  ~EventMetricsGauges() override;
  explicit PROTOBUF_CONSTEXPR EventMetricsGauges(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventMetricsGauges(const EventMetricsGauges& from);
  EventMetricsGauges(EventMetricsGauges&& from) noexcept
    : EventMetricsGauges() {
    *this = ::std::move(from);
  }

  inline EventMetricsGauges& operator=(const EventMetricsGauges& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetricsGauges& operator=(EventMetricsGauges&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventMetricsGauges& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventMetricsGauges* internal_default_instance() {
    return reinterpret_cast<const EventMetricsGauges*>(
               &_EventMetricsGauges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EventMetricsGauges& a, EventMetricsGauges& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetricsGauges* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventMetricsGauges* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventMetricsGauges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventMetricsGauges>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventMetricsGauges& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventMetricsGauges& from) {
    EventMetricsGauges::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventMetricsGauges* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "poplar.EventMetricsGauges";
  }
  protected:
  explicit EventMetricsGauges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kWorkersFieldNumber = 2,
    kFailedFieldNumber = 3,
  };
  // int64 state = 1;
  void clear_state();
  int64_t state() const;
  void set_state(int64_t value);
  private:
  int64_t _internal_state() const;
  void _internal_set_state(int64_t value);
  public:

  // int64 workers = 2;
  void clear_workers();
  int64_t workers() const;
  void set_workers(int64_t value);
  private:
  int64_t _internal_workers() const;
  void _internal_set_workers(int64_t value);
  public:

  // bool failed = 3;
  void clear_failed();
  bool failed() const;
  void set_failed(bool value);
  private:
  bool _internal_failed() const;
  void _internal_set_failed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:poplar.EventMetricsGauges)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t state_;
    int64_t workers_;
    bool failed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_collector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CollectorName

// string name = 1;
inline void CollectorName::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CollectorName::name() const {
  // @@protoc_insertion_point(field_get:poplar.CollectorName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CollectorName::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.CollectorName.name)
}
inline std::string* CollectorName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:poplar.CollectorName.name)
  return _s;
}
inline const std::string& CollectorName::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CollectorName::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CollectorName::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CollectorName::release_name() {
  // @@protoc_insertion_point(field_release:poplar.CollectorName.name)
  return _impl_.name_.Release();
}
inline void CollectorName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.CollectorName.name)
}

// -------------------------------------------------------------------

// EventMetrics

// string name = 1;
inline void EventMetrics::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EventMetrics::name() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EventMetrics::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:poplar.EventMetrics.name)
}
inline std::string* EventMetrics::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.name)
  return _s;
}
inline const std::string& EventMetrics::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EventMetrics::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EventMetrics::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EventMetrics::release_name() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.name)
  return _impl_.name_.Release();
}
inline void EventMetrics::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.name)
}

// .google.protobuf.Timestamp time = 2;
inline bool EventMetrics::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool EventMetrics::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EventMetrics::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EventMetrics::time() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.time)
  return _internal_time();
}
inline void EventMetrics::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.EventMetrics.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetrics::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetrics::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetrics::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EventMetrics::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.time)
  return _msg;
}
inline void EventMetrics::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.time)
}

// int64 id = 3;
inline void EventMetrics::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t EventMetrics::_internal_id() const {
  return _impl_.id_;
}
inline int64_t EventMetrics::id() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.id)
  return _internal_id();
}
inline void EventMetrics::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void EventMetrics::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetrics.id)
}

// .poplar.EventMetricsCounters counters = 4;
inline bool EventMetrics::_internal_has_counters() const {
  return this != internal_default_instance() && _impl_.counters_ != nullptr;
}
inline bool EventMetrics::has_counters() const {
  return _internal_has_counters();
}
inline void EventMetrics::clear_counters() {
  if (GetArenaForAllocation() == nullptr && _impl_.counters_ != nullptr) {
    delete _impl_.counters_;
  }
  _impl_.counters_ = nullptr;
}
inline const ::poplar::EventMetricsCounters& EventMetrics::_internal_counters() const {
  const ::poplar::EventMetricsCounters* p = _impl_.counters_;
  return p != nullptr ? *p : reinterpret_cast<const ::poplar::EventMetricsCounters&>(
      ::poplar::_EventMetricsCounters_default_instance_);
}
inline const ::poplar::EventMetricsCounters& EventMetrics::counters() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.counters)
  return _internal_counters();
}
inline void EventMetrics::unsafe_arena_set_allocated_counters(
    ::poplar::EventMetricsCounters* counters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counters_);
  }
  _impl_.counters_ = counters;
  if (counters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.EventMetrics.counters)
}
inline ::poplar::EventMetricsCounters* EventMetrics::release_counters() {
  
  ::poplar::EventMetricsCounters* temp = _impl_.counters_;
  _impl_.counters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::poplar::EventMetricsCounters* EventMetrics::unsafe_arena_release_counters() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.counters)
  
  ::poplar::EventMetricsCounters* temp = _impl_.counters_;
  _impl_.counters_ = nullptr;
  return temp;
}
inline ::poplar::EventMetricsCounters* EventMetrics::_internal_mutable_counters() {
  
  if (_impl_.counters_ == nullptr) {
    auto* p = CreateMaybeMessage<::poplar::EventMetricsCounters>(GetArenaForAllocation());
    _impl_.counters_ = p;
  }
  return _impl_.counters_;
}
inline ::poplar::EventMetricsCounters* EventMetrics::mutable_counters() {
  ::poplar::EventMetricsCounters* _msg = _internal_mutable_counters();
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.counters)
  return _msg;
}
inline void EventMetrics::set_allocated_counters(::poplar::EventMetricsCounters* counters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.counters_;
  }
  if (counters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(counters);
    if (message_arena != submessage_arena) {
      counters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.counters_ = counters;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.counters)
}

// .poplar.EventMetricsTimers timers = 5;
inline bool EventMetrics::_internal_has_timers() const {
  return this != internal_default_instance() && _impl_.timers_ != nullptr;
}
inline bool EventMetrics::has_timers() const {
  return _internal_has_timers();
}
inline void EventMetrics::clear_timers() {
  if (GetArenaForAllocation() == nullptr && _impl_.timers_ != nullptr) {
    delete _impl_.timers_;
  }
  _impl_.timers_ = nullptr;
}
inline const ::poplar::EventMetricsTimers& EventMetrics::_internal_timers() const {
  const ::poplar::EventMetricsTimers* p = _impl_.timers_;
  return p != nullptr ? *p : reinterpret_cast<const ::poplar::EventMetricsTimers&>(
      ::poplar::_EventMetricsTimers_default_instance_);
}
inline const ::poplar::EventMetricsTimers& EventMetrics::timers() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.timers)
  return _internal_timers();
}
inline void EventMetrics::unsafe_arena_set_allocated_timers(
    ::poplar::EventMetricsTimers* timers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timers_);
  }
  _impl_.timers_ = timers;
  if (timers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.EventMetrics.timers)
}
inline ::poplar::EventMetricsTimers* EventMetrics::release_timers() {
  
  ::poplar::EventMetricsTimers* temp = _impl_.timers_;
  _impl_.timers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::poplar::EventMetricsTimers* EventMetrics::unsafe_arena_release_timers() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.timers)
  
  ::poplar::EventMetricsTimers* temp = _impl_.timers_;
  _impl_.timers_ = nullptr;
  return temp;
}
inline ::poplar::EventMetricsTimers* EventMetrics::_internal_mutable_timers() {
  
  if (_impl_.timers_ == nullptr) {
    auto* p = CreateMaybeMessage<::poplar::EventMetricsTimers>(GetArenaForAllocation());
    _impl_.timers_ = p;
  }
  return _impl_.timers_;
}
inline ::poplar::EventMetricsTimers* EventMetrics::mutable_timers() {
  ::poplar::EventMetricsTimers* _msg = _internal_mutable_timers();
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.timers)
  return _msg;
}
inline void EventMetrics::set_allocated_timers(::poplar::EventMetricsTimers* timers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.timers_;
  }
  if (timers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timers);
    if (message_arena != submessage_arena) {
      timers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timers_ = timers;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.timers)
}

// .poplar.EventMetricsGauges gauges = 6;
inline bool EventMetrics::_internal_has_gauges() const {
  return this != internal_default_instance() && _impl_.gauges_ != nullptr;
}
inline bool EventMetrics::has_gauges() const {
  return _internal_has_gauges();
}
inline void EventMetrics::clear_gauges() {
  if (GetArenaForAllocation() == nullptr && _impl_.gauges_ != nullptr) {
    delete _impl_.gauges_;
  }
  _impl_.gauges_ = nullptr;
}
inline const ::poplar::EventMetricsGauges& EventMetrics::_internal_gauges() const {
  const ::poplar::EventMetricsGauges* p = _impl_.gauges_;
  return p != nullptr ? *p : reinterpret_cast<const ::poplar::EventMetricsGauges&>(
      ::poplar::_EventMetricsGauges_default_instance_);
}
inline const ::poplar::EventMetricsGauges& EventMetrics::gauges() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetrics.gauges)
  return _internal_gauges();
}
inline void EventMetrics::unsafe_arena_set_allocated_gauges(
    ::poplar::EventMetricsGauges* gauges) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gauges_);
  }
  _impl_.gauges_ = gauges;
  if (gauges) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.EventMetrics.gauges)
}
inline ::poplar::EventMetricsGauges* EventMetrics::release_gauges() {
  
  ::poplar::EventMetricsGauges* temp = _impl_.gauges_;
  _impl_.gauges_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::poplar::EventMetricsGauges* EventMetrics::unsafe_arena_release_gauges() {
  // @@protoc_insertion_point(field_release:poplar.EventMetrics.gauges)
  
  ::poplar::EventMetricsGauges* temp = _impl_.gauges_;
  _impl_.gauges_ = nullptr;
  return temp;
}
inline ::poplar::EventMetricsGauges* EventMetrics::_internal_mutable_gauges() {
  
  if (_impl_.gauges_ == nullptr) {
    auto* p = CreateMaybeMessage<::poplar::EventMetricsGauges>(GetArenaForAllocation());
    _impl_.gauges_ = p;
  }
  return _impl_.gauges_;
}
inline ::poplar::EventMetricsGauges* EventMetrics::mutable_gauges() {
  ::poplar::EventMetricsGauges* _msg = _internal_mutable_gauges();
  // @@protoc_insertion_point(field_mutable:poplar.EventMetrics.gauges)
  return _msg;
}
inline void EventMetrics::set_allocated_gauges(::poplar::EventMetricsGauges* gauges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gauges_;
  }
  if (gauges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gauges);
    if (message_arena != submessage_arena) {
      gauges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gauges, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gauges_ = gauges;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetrics.gauges)
}

// -------------------------------------------------------------------

// EventMetricsCounters

// int64 number = 1;
inline void EventMetricsCounters::clear_number() {
  _impl_.number_ = int64_t{0};
}
inline int64_t EventMetricsCounters::_internal_number() const {
  return _impl_.number_;
}
inline int64_t EventMetricsCounters::number() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsCounters.number)
  return _internal_number();
}
inline void EventMetricsCounters::_internal_set_number(int64_t value) {
  
  _impl_.number_ = value;
}
inline void EventMetricsCounters::set_number(int64_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsCounters.number)
}

// int64 ops = 2;
inline void EventMetricsCounters::clear_ops() {
  _impl_.ops_ = int64_t{0};
}
inline int64_t EventMetricsCounters::_internal_ops() const {
  return _impl_.ops_;
}
inline int64_t EventMetricsCounters::ops() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsCounters.ops)
  return _internal_ops();
}
inline void EventMetricsCounters::_internal_set_ops(int64_t value) {
  
  _impl_.ops_ = value;
}
inline void EventMetricsCounters::set_ops(int64_t value) {
  _internal_set_ops(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsCounters.ops)
}

// int64 size = 3;
inline void EventMetricsCounters::clear_size() {
  _impl_.size_ = int64_t{0};
}
inline int64_t EventMetricsCounters::_internal_size() const {
  return _impl_.size_;
}
inline int64_t EventMetricsCounters::size() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsCounters.size)
  return _internal_size();
}
inline void EventMetricsCounters::_internal_set_size(int64_t value) {
  
  _impl_.size_ = value;
}
inline void EventMetricsCounters::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsCounters.size)
}

// int64 errors = 4;
inline void EventMetricsCounters::clear_errors() {
  _impl_.errors_ = int64_t{0};
}
inline int64_t EventMetricsCounters::_internal_errors() const {
  return _impl_.errors_;
}
inline int64_t EventMetricsCounters::errors() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsCounters.errors)
  return _internal_errors();
}
inline void EventMetricsCounters::_internal_set_errors(int64_t value) {
  
  _impl_.errors_ = value;
}
inline void EventMetricsCounters::set_errors(int64_t value) {
  _internal_set_errors(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsCounters.errors)
}

// -------------------------------------------------------------------

// EventMetricsTimers

// .google.protobuf.Duration total = 1;
inline bool EventMetricsTimers::_internal_has_total() const {
  return this != internal_default_instance() && _impl_.total_ != nullptr;
}
inline bool EventMetricsTimers::has_total() const {
  return _internal_has_total();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& EventMetricsTimers::_internal_total() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.total_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& EventMetricsTimers::total() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsTimers.total)
  return _internal_total();
}
inline void EventMetricsTimers::unsafe_arena_set_allocated_total(
    ::PROTOBUF_NAMESPACE_ID::Duration* total) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_);
  }
  _impl_.total_ = total;
  if (total) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.EventMetricsTimers.total)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::release_total() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_;
  _impl_.total_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::unsafe_arena_release_total() {
  // @@protoc_insertion_point(field_release:poplar.EventMetricsTimers.total)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.total_;
  _impl_.total_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::_internal_mutable_total() {
  
  if (_impl_.total_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.total_ = p;
  }
  return _impl_.total_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::mutable_total() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_total();
  // @@protoc_insertion_point(field_mutable:poplar.EventMetricsTimers.total)
  return _msg;
}
inline void EventMetricsTimers::set_allocated_total(::PROTOBUF_NAMESPACE_ID::Duration* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_);
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total));
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.total_ = total;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetricsTimers.total)
}

// .google.protobuf.Duration duration = 2;
inline bool EventMetricsTimers::_internal_has_duration() const {
  return this != internal_default_instance() && _impl_.duration_ != nullptr;
}
inline bool EventMetricsTimers::has_duration() const {
  return _internal_has_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& EventMetricsTimers::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& EventMetricsTimers::duration() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsTimers.duration)
  return _internal_duration();
}
inline void EventMetricsTimers::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:poplar.EventMetricsTimers.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::release_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:poplar.EventMetricsTimers.duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::_internal_mutable_duration() {
  
  if (_impl_.duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.duration_ = p;
  }
  return _impl_.duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EventMetricsTimers::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:poplar.EventMetricsTimers.duration)
  return _msg;
}
inline void EventMetricsTimers::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:poplar.EventMetricsTimers.duration)
}

// -------------------------------------------------------------------

// EventMetricsGauges

// int64 state = 1;
inline void EventMetricsGauges::clear_state() {
  _impl_.state_ = int64_t{0};
}
inline int64_t EventMetricsGauges::_internal_state() const {
  return _impl_.state_;
}
inline int64_t EventMetricsGauges::state() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsGauges.state)
  return _internal_state();
}
inline void EventMetricsGauges::_internal_set_state(int64_t value) {
  
  _impl_.state_ = value;
}
inline void EventMetricsGauges::set_state(int64_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsGauges.state)
}

// int64 workers = 2;
inline void EventMetricsGauges::clear_workers() {
  _impl_.workers_ = int64_t{0};
}
inline int64_t EventMetricsGauges::_internal_workers() const {
  return _impl_.workers_;
}
inline int64_t EventMetricsGauges::workers() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsGauges.workers)
  return _internal_workers();
}
inline void EventMetricsGauges::_internal_set_workers(int64_t value) {
  
  _impl_.workers_ = value;
}
inline void EventMetricsGauges::set_workers(int64_t value) {
  _internal_set_workers(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsGauges.workers)
}

// bool failed = 3;
inline void EventMetricsGauges::clear_failed() {
  _impl_.failed_ = false;
}
inline bool EventMetricsGauges::_internal_failed() const {
  return _impl_.failed_;
}
inline bool EventMetricsGauges::failed() const {
  // @@protoc_insertion_point(field_get:poplar.EventMetricsGauges.failed)
  return _internal_failed();
}
inline void EventMetricsGauges::_internal_set_failed(bool value) {
  
  _impl_.failed_ = value;
}
inline void EventMetricsGauges::set_failed(bool value) {
  _internal_set_failed(value);
  // @@protoc_insertion_point(field_set:poplar.EventMetricsGauges.failed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace poplar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_collector_2eproto
