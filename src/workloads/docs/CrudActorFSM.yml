SchemaVersion: 2018-07-01
Owner: Product Performance

Description: |
  Example workload demonstrating FSM support in CrudActor. The CrudActor supports finite state
  machines, with states and transitions.

  Each state specifies a list of transitions. The next transition is picked probabilistically, based
  on the transition weights. Transitions may experience delay (sleepBefore), before changing the
  state. The state has associated operations which execute while the FSM remains in that
  state.

  By default the system will measure the latency to execute each set of operations associated with a
  state, and each individual operation.

  There is an initial state vector, with weights. Each actor instance will probabilistically and
  independently choose its initial state based on the weights.

  This example workload is a toy example modeling the state of 5 smart phones. The model has four
  states for each phone: On, Off, Sleep, and Error, and transitions between those states. In this
  example, there is monitoring for the smart phones, and the database gets updated based on the
  state of the phones and state changes. The workload (monitoring app) tracks the current phone
  state in one document per phone (update operations). Note that this is separate than the state
  machinery tracking of state.

Clients:
  Default:
    QueryOptions:
      maxPoolSize: 100

Actors:
  # Preload some documents
  - Name: SetupDemo
    Type: CrudActor
    Threads: 1
    Database: StateTest
    Phases:
      - Repeat: 1
        Collection: CrudDemo
        Operations:
          - OperationName: bulkWrite
            OperationCommand:
              WriteOperations:
                - WriteCommand: insertOne
                  Document: {phoneID: 1, currentPhoneState: PhoneIsOff}
                - WriteCommand: insertOne
                  Document: {phoneID: 2, currentPhoneState: PhoneIsOff}
                - WriteCommand: insertOne
                  Document: {phoneID: 3, currentPhoneState: PhoneIsOff}
                - WriteCommand: insertOne
                  Document: {phoneID: 4, currentPhoneState: PhoneIsOff}
                - WriteCommand: insertOne
                  Document: {phoneID: 5, currentPhoneState: PhoneIsOff}
      - &nop {Nop: true}

  - Name: StateSmartPhoneDemo
    Type: CrudActor
    Threads: 5
    Database: StateTest
    Phases:
      - *nop
      - Duration: 30 seconds
        Collection: CrudDemo
        States:
          - Name: "On" # The device is on

            # A state can have (optional) a set of operations that execute upon entering the state. This
            # state updates a specific document to indicate it is in state On. Currently, the operations
            # are executed exactly once. In the future, we may add support for duration, repeat, etc to
            # match general phase loop semantics.

            # Note: Following the analogy to phases -- phases may be blocking or non-blocking. States are
            # always non-blocking, in the sense that any sleepBefore delays will be interrupted to close
            # the phase. However, any active operations will be finished.

            # For example, this phase has a 30 second duration, making it blocking. When that 30 seconds
            # end all the actors will end their phases. If an actor is in a sleepBefore, it will still
            # exit the phase. If the actor is executing a state's operations, it will complete those
            # operations, and then exit the phase.
            Operations:
              - OperationName: updateOne
                OperationCommand:
                  Filter: &filter {phoneID: {^ActorId: {}}}
                  Update:
                    $set: {currentPhoneState: PhoneIsOn}

            # Transitions specifies next states, delays, and operations. The On state can transition to
            # each of the three other states
            Transitions:
              - To: "Off" # Transition to this state

                # Transitions are probabilistically chosen based on weight. A transition with weight 2 is
                # twice as likely to be picked as a transition with weight 1. Weights must be greater than
                # 0.
                Weight: 1

                # Transitions also support the phase keyword sleepBefore.  For sleepBefore, the system is
                # considered to remain in it's current state.

                # In the future, if the state supports repeating action, the operations should continue
                # repeating until the transition fires. The transition always respects the
                # blocking behavior of the phase. If the phase ends during a sleepBefore, the transition is
                # aborted.

                # ^TimeSpec is a proposed generator to randomly generate acceptable TimeSpecs with units. It
                # accepts any valid int or double generator or constant for value. It currently only works
                # in the CrudActor (no other actors). Transitions only support SleepBefore. They do not
                # support the SleepAfter keyword at this time.
                SleepBefore: {^TimeSpec: {value: {^RandomDouble: {min: 0, max: 15}}, unit: seconds}}

          - Name: "Off" # The device is Off
            Operations:
              - OperationName: updateOne
                OperationCommand:
                  Filter: *filter
                  Update:
                    $set: {currentPhoneState: PhoneIsOff}
            Transitions: # Can only go to On from Off
              - To: "On"
                Weight: 1
                SleepBefore: {^TimeSpec: {value: {^RandomDouble: {min: 0, max: 15}}, unit: seconds}}

          - Name: Sleep
            Operations:
              - OperationName: updateOne
                OperationCommand:
                  Filter: *filter
                  Update:
                    $set: {currentPhoneState: PhoneIsSleeping}
            Transitions: # Can only go to On or Off from sleep
              - To: "On"
                Weight: 1
                SleepBefore: {^TimeSpec: {value: {^RandomDouble: {min: 0, max: 15}}, unit: seconds}}
              - To: "Off"
                Weight: 1
                SleepBefore: {^TimeSpec: {value: {^RandomDouble: {min: 0, max: 15}}, unit: seconds}}

          - Name: Error
            Operations:
              - OperationName: updateOne
                OperationCommand:
                  Filter: *filter
                  Update:
                    $set: {currentPhoneState: PhoneIsInError}
            Transitions: # Turn off on error
              - To: "Off"
                Weight: 1
                SleepBefore: {^TimeSpec: {value: {^RandomDouble: {min: 0, max: 15}}, unit: seconds}}

        # In this example we always start in the off State
        InitialStates:
          - State: "Off"
            Weight: 1
