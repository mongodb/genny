SchemaVersion: 2018-07-01
Owner: "@10gen/server-security"
Description: |
  Example workload demonstrating encryption support in Genny's client pools.
  The CrudActor in this workload performs encrypted operations using a Client
  that is configured with the FLE and Queryable auto encryption options.

  Encryption is configured per Client. Under the EncryptionOptions
  element of a Client instance, the following fields must be provided:

    KeyVaultDatabase     - the name of the keyvault database
    KeyVaultCollection   - the name of the keyvault collection
    EncryptedCollections - sequence of encrypted collection descriptors

  Each encrypted collection descriptor under the EncryptedCollections sequence
  must define the following fields:

    Database           - the name of the encrypted database
    Collection         - the name of the encrypted collection
    EncryptionType     - the type of client-side encryption used (either 'fle' or 'queryable')

  Depending on the EncryptionType, the encryption schema may be specified using either:
    FLEEncryptedFields        - if EncryptionType is "fle"
    QueryableEncryptedFields  - if EncryptionType is "queryable"

  These map the path of an encrypted field in the collection to its encryption parameters.
  Both can appear under a collection descriptor node, but only the node that matches the specified
  EncryptionType will apply throughout the workload.

  Each subnode of FLEEncryptedFields or QueryableEncryptedFields is a key-value pair where
  the key is the field path, and the value is an object whose required fields depend on the type.

  Field paths cannot be a prefix of another path under the same FLEEncryptedFields or
  QueryableEncryptedFields map. For instance, "pii" and "pii.ssn" are not allowed, since "pii" is
  a path prefix of the other.

  Under FLEEncryptedFields, each object mapped to a path must have the following fields:
    type      - the BSON type of values for this field
    algorithm - the encryption algorithm: either "random" or "deterministic"
                "deterministic" means that the ciphertext is always the same for the same
                plaintext value, which means that this field can be used on queries.

  Under QueryableEncryptedFields, each object mapped to a path must have the following fields:
    type      - the BSON type of values for this field
    queries   - an array of objects that specify "queryType" and other parameters for QE.

  An Actor that wishes to perform encrypted operations on an encrypted collection must
  be using the Client pool under which the schema for that encrypted collection is defined.

  Each Client that has an EncryptedOptions creates its own key vault collection at the database
  specified in 'KeyVaultDatabase' during startup, after dropping any existing collections with
  the same namespace. The URI of the key vault is the same as the URI specified in the Client's
  'URI' field. After creating the key vault, data keys are generated for each encrypted field
  path under all collections defined in 'EncryptedCollections'.

  It is important that each Client that defines EncryptionOptions has a unique key vault namespace
  to avoid conflicts during setup.

GlobalDefaults:
  EncryptedDB: &encrypted_db genny_fle

Clients:
  Default:
    QueryOptions:
      maxPoolSize: 10
  EncryptedPool:
    QueryOptions:
      maxPoolSize: 400
    EncryptionOptions:
      KeyVaultDatabase: "keyvault"
      KeyVaultCollection: "datakeys"
      EncryptedCollections:
      - Database: *encrypted_db
        Collection: "accounts"
        EncryptionType: "fle"
        FLEEncryptedFields:
          name: { type: "string", algorithm: "random" }
          credit: { type: "long", algorithm: "random" }
          pii.ssn: { type: "string", algorithm: "deterministic" }
          pii.ppn: {type: "string", algorithm: "random"}
          bio.dob: { type: "date", algorithm: "random" }
          bio.birthplace.street: { type: "string", algorithm: "random" }
          bio.birthplace.country: { type: "string", algorithm: "deterministic" }
      - Database: *encrypted_db
        Collection: "medical"
        EncryptionType: "fle"
        FLEEncryptedFields:
          patient_id: { type: "string", algorithm: "deterministic" }
          insurance: { type: "string", algorithm: "random" }
          conditions: { type: "array", algorithm: "random" }

Actors:
- Name: Accounts
  Type: CrudActor
  Threads: 10
  Database: *encrypted_db
  ClientName: EncryptedPool  # Use encryption-enabled pool
  Phases:
  - Repeat: 10
    Collection: accounts
    Operations:
    - OperationName: insertOne
      OperationCommand:
        Document:
          name: "Bob"
          surname: "Belcher"
          credit: {^RandomInt: {min: 300, max: 850}}
          pii:
            ssn: {^RandomString: {length: 9, alphabet: "0123456789"}}
            ppn: {^RandomString: {length: 9, alphabet: "0123456789"}}
          bio:
            dob: {^RandomDate: {}}
            birthplace:
              street: {^Join: {array: [{^RandomString: {length: 4, alphabet: "123456789"}}, " Ocean Ave"]}}
              country: "USA"
          # T1 inserts 0-9, T2 inserts 10-19, etc..
          _id: {^Inc: {start: -10, multiplier: 10}}
  - Repeat: 1
    Collection: accounts
    Operations:
    - OperationName: updateOne
      OperationCommand:
        # Query on unencrypted field
        Filter: {surname: "Belcher"}
        Update: {$set: {name: "Betty", surname: "Burger", pii.ssn: '111-11-1111', bio.birthplace.country: "UK"}}
    - OperationName: updateOne
      OperationCommand:
        # Query on deterministically-encrypted field
        Filter: {bio.birthplace.country: "USA"}
        Update: {$set: {name: "Barry", surname: "Barbie", bio.birthplace.country: "Australia"}}
    - OperationName: updateOne
      OperationCommand:
        Filter: {surname: "Belcher"}
        Update: {$set: {name: "Billy", surname: "Brown", pii.ssn: '111-11-1111', bio.birthplace.country: "Canada"}}
    - OperationName: updateOne
      OperationCommand:
        Filter: {pii.ssn: "111-11-1111"}
        Update: {$set: {surname: "Bacon", pii.ssn: "222-22-2222"}}
- Name: Medical
  Type: CrudActor
  Threads: 10
  Database: *encrypted_db
  ClientName: EncryptedPool
  Phases:
  - Repeat: 10
    Collection: medical
    Operations:
    - OperationName: insertOne
      OperationCommand:
        Document:
          patient_id: {^Join: {array: ["Patient-", {^ActorIdString: {}}]}}
          patient_id_plain: {^Join: {array: ["Patient-", {^ActorIdString: {}}]}}
          conditions: {^Array: {of: 1, number: 10}}
          _id: {^Inc: {start: -10, multiplier: 10}}
  - Repeat: 10
    Collection: medical
    Operations:
    - OperationName: updateOne
      OperationCommand:
        Filter: {patient_id: {^Join: {array: ["Patient-", {^ActorIdString: {}}]}}}
        Update:
          $set:
            insurance: "none"
            patient_id: {^Join: {array: ["UpdatedPatient-", {^ActorIdString: {}}]}}
            physician: {^Join: {array: ["Dr.", {^RandomString: {length: 10}}]}}
            conditions: [ "dysphagia", "arrythmia", "hemiparesis" ]
