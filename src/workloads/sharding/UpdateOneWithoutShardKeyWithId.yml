SchemaVersion: 2018-07-01
Owner: "@mongodb/sharding"
Description: |
  Runs the updateOne operation of type WriteWithoutShardKeyWithId.

  The workload consists of 3 phases:
    1. Creating an empty sharded collection distributed across all shards in the cluster.
    2. Populating the sharded collection with data.
    3. Running updateOne operations of type WriteWithoutShardKeyWithId.

  The inserted documents have the following form:

      {_id: 10, oldKey: 20, newKey: 30, counter: 0, padding: 'random string of bytes ...'}

  The collection is sharded on {oldKey: 'hashed'}.

GlobalDefaults:
  Nop: &Nop {Nop: true}

  Database: &Database test
  # Collection0 is the default collection populated by the MonotonicSingleLoader.
  Collection: &Collection Collection0
  Namespace: &Namespace test.Collection0

  # Note that the exact document size may exceed ApproxDocumentSize because of field names and other
  # fields in the document.
  ApproxDocumentSize: &ApproxDocumentSize 10000  # = 10kB
  ApproxDocumentSize80Pct: &ApproxDocumentSize80Pct 8000  # = 8kB
  # TODO: Increase DocumentCount to 4000000 so there will be ~20GB of data inserted on each shard
  # and increase NumReshardedChunks to 400 so there continue to be ~50MB of data per chunk.
  DocumentCount: &DocumentCount 100000  # for an approximate total of 1GB

  ShardKeyValueMin: &ShardKeyValueMin 1
  ShardKeyValueMax: &ShardKeyValueMax 100

  WriteOperations: &WriteOperations
  - OperationName: updateOne
    OperationCommand:
      Filter: {_id: {^RandomInt: {min: 1, max: *DocumentCount}}}
      Update: {$inc: {counter: 1}}

Clients:
  Default:
    QueryOptions:
      maxPoolSize: 300

Actors:
- Name: CreateShardedCollection
  Type: AdminCommand
  Threads: 1
  Phases:
  - Repeat: 1
    Database: admin
    Operations:
    - OperationMetricsName: EnableSharding
      OperationName: AdminCommand
      OperationCommand:
        enableSharding: *Database
    - OperationMetricsName: ShardCollection
      OperationName: AdminCommand
      OperationCommand:
        shardCollection: *Namespace
        # Hashed sharding will pre-split the chunk ranges and evenly distribute them across all of
        # the shards.
        key: {oldKey: hashed}
  - *Nop
  - *Nop
    #  - *Nop
    #  - *Nop

- Name: LoadInitialData
  Type: MonotonicSingleLoader
  Threads: 100
  Phases:
  - *Nop
  - Repeat: 1
    BatchSize: 1000
    DocumentCount: *DocumentCount
    Database: *Database
    Document:
      oldKey: {^RandomInt: {min: *ShardKeyValueMin, max: *ShardKeyValueMax}}
      newKey: {^RandomInt: {min: *ShardKeyValueMin, max: *ShardKeyValueMax}}
      counter: 0
      padding: {^FastRandomString: {length: {^RandomInt: {min: *ApproxDocumentSize80Pct, max: *ApproxDocumentSize}}}}
  - *Nop
    #  - *Nop
    #  - *Nop

- Name: WriteCollection
  Type: CrudActor
  Threads: 100
  Database: *Database
  Phases:
  - *Nop
  - *Nop
  - MetricsName: UpdateOneMetrics
    Duration: 100 seconds
    Collection: *Collection
    Operations: *WriteOperations
      #  - MetricsName: DuringResharding
      #    Blocking: None
      #    Collection: *Collection
      #    Operations: *WriteOperations
      #  - MetricsName: AfterResharding
      #    Duration: 10 seconds
      #    Collection: *Collection
      #    Operations: *WriteOperations

AutoRun:
- When:
    mongodb_setup:
      $eq:
      - shard
      - shard-lite
      - shard-lite-all-feature-flags
