SchemaVersion: 2018-07-01
Owner: "@mongodb/sharding"
Description: |

GlobalDefaults:
  Database0: &Database0 databaseForMultiShardTestingIndex0
  Database1: &Database1 databaseForMultiShardTestingIndex1

  # Note that the exact document size may exceed ApproxDocumentSize because of field names and other
  # fields in the document.
  ApproxDocumentSize: &ApproxDocumentSize 2000  # = 2kB
  ApproxDocumentSize50Pct: &ApproxDocumentSize50Pct 1000  # = 1kB
  DocumentCount: &DocumentCount 100_000

  MaxPhase: &MaxPhase 6

Actors:
- Name: CreateShardedCollection
  Type: AdminCommand
  Threads: 1
  Phases:
    OnlyActiveInPhases:
      Active: [0]
      NopInPhasesUpTo: *MaxPhase
      PhaseConfig:
        Repeat: 1
        Database: admin
        Operations:
        - OperationName: AdminCommand
          OperationCommand:
            enableSharding: *Database0
        - OperationName: AdminCommand
          OperationCommand:
            enableSharding: *Database1
        - OperationName: AdminCommand
          OperationCommand:
            shardCollection: databaseForMultiShardTestingIndex0.Collection0
            key: {_id: hashed}
        - OperationName: AdminCommand
          OperationCommand:
            shardCollection: databaseForMultiShardTestingIndex1.Collection0
            key: {_id: hashed}
        - OperationName: AdminCommand
          OperationCommand:
            movePrimary: *Database0
            to: rs0
        - OperationName: AdminCommand
          OperationCommand:
            movePrimary: *Database1
            to: rs1

- Name: LoadInitialData
  Type: MonotonicLoader
  Threads: 4
  Phases:
  - &Nop {Nop: true}
  - Repeat: 1
    Threads: 4
    BatchSize: 1000
    DocumentCount: *DocumentCount
    CollectionCount: 2
    Database: *Database0
    Document: &Document
      counter: 0
      padding: {^FastRandomString: {length: {^RandomInt: {min: *ApproxDocumentSize50Pct, max: *ApproxDocumentSize}}}}
  - Repeat: 1
    Threads: 4
    BatchSize: 1000
    DocumentCount: *DocumentCount
    CollectionCount: 2
    Database: *Database1
    Document: *Document
  - *Nop
  - *Nop
  - *Nop
  - *Nop

- Name: Transactions
  Type: CrudActor
  Threads: 16
  Database: *Database0
  Phases:
    - *Nop
    - *Nop
    - *Nop
    - MetricsName: ShardedCollectionUpdate
      Duration: 1 minute
      Collection: Collection0
      ThrowOnFailure: false  # Transactions are allowed to fail.
      RecordFailure: true  # We still want to record the metrics even if the transaction is rolled back.
      Operations:
      - OperationName: withTransaction
        OperationCommand:
          OperationsInTransaction:
          - OperationName: updateOne
            OperationCommand:
              Filter: &RandomIdFilter {_id: {^RandomInt: {min: 1, max: *DocumentCount}}}
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
    - MetricsName: ShardedAndNonShardedCollectionsUpdate
      Duration: 1 minute
      ThrowOnFailure: false  # Transactions are allowed to fail.
      RecordFailure: true  # We still want to record the metrics even if the transaction is rolled back.
      Collection: Collection0
      Operations:
      - OperationName: withTransaction
        OperationCommand:
          OperationsInTransaction:
          - OperationName: updateOne
            Collection: Collection0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Collection: Collection0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Collection: Collection0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Collection: Collection0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Collection: Collection0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Collection: Collection1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Collection: Collection1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Collection: Collection1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Collection: Collection1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Collection: Collection1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
    - MetricsName: DifferentDatabasesNonShardedCollectionsUpdate
      Duration: 1 minute
      ThrowOnFailure: false  # Transactions are allowed to fail.
      RecordFailure: true  # We still want to record the metrics even if the transaction is rolled back.
      Collection: Collection1
      Operations:
      - OperationName: withTransaction
        OperationCommand:
          OperationsInTransaction:
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
    - MetricsName: DifferentDatabasesShardedCollectionsUpdate
      Duration: 1 minute
      ThrowOnFailure: false  # Transactions are allowed to fail.
      RecordFailure: true  # We still want to record the metrics even if the transaction is rolled back.
      Collection: Collection0
      Operations:
      - OperationName: withTransaction
        OperationCommand:
          OperationsInTransaction:
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database0
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}
          - OperationName: updateOne
            Database: *Database1
            OperationCommand:
              Filter: *RandomIdFilter
              Update: {$inc: {counter: 1}}

AutoRun:
- When:
    mongodb_setup:
      $eq:
      - shard
      - shard-lite
      - shard-lite-all-feature-flags
    branch_name:
      $gte: v7.0
