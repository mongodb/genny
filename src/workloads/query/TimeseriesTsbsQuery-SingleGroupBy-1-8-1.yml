SchemaVersion: 2018-07-01
Owner: "@mongodb/query-integration"
Description: |
  This workload runs different time-series optimizations with the tsbs dataset. During development,
  This workload runs queries from the tsbs_query benchmark in Genny. It allows us to cross-check
  the results of the TSBS benchmarks, collect additional measurements, profile individual queries,
  and extend some of the queries as needed. The data is preloaded by the dsi configuration. See
  'configurations/test_control/test_control.tsbs_query_genny.yml' for all  the details. There are 20736000
  documents in the collection. There are some differences between the queries in this workload and tsbs,
  but we do not expect these differences to significantly affect runtime:
  1. TSBS will generate a random start time between the start/end time of the workload for every query type.
  We hard code our time values, since genny does not currently support date arithmetic, nor storing a fixed
  value from randomized generation.
  2. TSBS randomizes which measurement fields to group by, we do not randomize these fields. Since all the fields
  are random integers between 0-100 we don't expect different fields to have significant runtime differences.

Keywords:
  - timeseries
  - aggregate
  - group
  - sort

Clients:
  Default:
    QueryOptions:
      maxPoolSize: 4000 # With 8 threads we need a larger pool.

GlobalDefaults:
  database: &database cpu
  collection: &collection point_data
  maxPhases: &maxPhases 2
  repeat: &repeat 500
  # TSBS constructs a time windows of various sizes (1 hour, 8 hours, 12 hours) from a uniformly
  # random start-time within this time-period. Ideally, we would do this as well, but currently
  # genny doesn't support storing randomized date values as variables, so we will fix a starting
  # value and increment it each time the query runs.
  startDate: &startDate "2016-01-04T21:49:27Z"
  startDatePlusOneHour: &startDatePlusOneHour "2016-01-04T22:49:27Z"
  startDatePlusEightHours: &startDatePlusEightHours "2016-01-05T05:49:27Z"
  startDatePlusTwelveHours: &startDatePlusTwelveHours "2016-01-05T09:49:27Z"
  closeToEndTime: &closeToEndTime "2016-01-20T09:49:27Z"

# Create variables to mimic the randomness of tsbs_generate_queries.
# Generates a single string like "host_42", with random integer in range [0,99].
GenHostNames:
  &GenHostNames {
    ^FormatString:
      {
        "format": "host_%d",
        "withArgs": [{ ^RandomInt: { min: 0, max: 99 } }],
      },
  }

# Generates an array of strings like "host_42", with random integer in range [0,99].
HostName1:
  &HostName1 { ^Array: { of: *GenHostNames, number: 1, distinct: true } }
HostName8:
  &HostName8 { ^Array: { of: *GenHostNames, number: 8, distinct: true } }

Actors:
  # The data is already loaded into the collection from the dsi configuration.
  # We will Quiesce before each query.
  - Name: Quiesce
    Type: QuiesceActor
    Threads: 1
    Database: *database
    Phases:
      OnlyActiveInPhases:
        Active: [0, 2]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 1

  - Name: single_groupby_1_8_1
    Type: CrudActor
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [1]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: *repeat
          Database: *database
          Collection: *collection
          Operations:
            - OperationName: aggregate
              OperationCommand:
                Pipeline:
                  [
                    {
                      $match:
                        {
                          measurement: "cpu",
                          "tags.hostname": { $in: *HostName8 },
                          time:
                            {
                              $gte:
                                {
                                  ^Cycle:
                                    {
                                      ofLength: 100,
                                      fromGenerator:
                                        { ^IncDate: { start: *startDate, step: 2520000 } },
                                    },
                                },
                              $lt:
                                {
                                  ^Cycle:
                                    {
                                      ofLength: 100,
                                      fromGenerator:
                                        {
                                          ^IncDate: { start: *startDatePlusOneHour, step: 2520000 },
                                        },
                                    },
                                },
                            },
                        },
                    },
                    {
                      $group:
                        {
                          _id: { $dateTrunc: { date: "$time", unit: "minute" } },
                          max_usage_user: { $max: "$usage_user" },
                        },
                    },
                    { $sort: { _id: 1 } },
                  ]
