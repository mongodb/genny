SchemaVersion: 2018-07-01
Owner: "@mongodb/query"
Description: |
  This workload measures the performance of queries with rich filters. First, we issue a bunch of
  plain queries with rich filters to get the performance baseline. After that, we issue the same
  queries, but with projection. Finally, we create an index and issue the same queries with
  projection, expecting that they will use this index.

Actors:

# Phases:
# 1. Insert data
# 2. Fsync
# 3. Plain query (without index or projection)
# 4. Query with projection, but without index
# 5. Create index
# 6. Fsync
# 7. Query with projection and with index

- Name: InsertData
  Type: Loader
  Threads: 4
  Phases:
  - Repeat: 1
    Database: &DB test
    MultipleThreadsPerCollection: true
    CollectionCount: 1  # Collection name will be Collection0, this is not configurable.
    DocumentCount: 1e6
    BatchSize: 1000
    Document:
      region: {^RandomInt: {min: 1999, max: 1999}}
      firstname: &firstname {^FastRandomString: {length: {^RandomInt: {min: 3, max: 3}}}}
      lastname: &lastname {^FastRandomString: {length: {^RandomInt: {min: 5, max: 5}}}}
      cell: {^RandomInt: {min: 1111111111, max: 1111111111}}
      email: {^Join: {array: [
        {^FastRandomString: {length: {^RandomInt: {min: 3, max: 3}}, alphabet: "A"}},
        "@",
        {^Choose: {from: ["yahoo"]}},
        ".",
        {^Choose: {from: ["net"]}}
      ]}}
      dob: {^RandomDate: {min: "1930-01-01", max: "2016-12-31"}}
      gender: {^Choose: {from: ["Female"]}}
      address: &address {
        number: {^RandomInt: {min: 9999, max: 9999}},
        street: {^FastRandomString: {length: {^RandomInt: {min: 30, max: 30}}}},
        city: {^FastRandomString: {length: {^RandomInt: {min: 5, max: 5}}}},
        state: {^Choose: {from: ["UT"]}},
        zip: {^FastRandomString: {length: 6, alphabet: "2"}},
        location: {position: {type: "Point", coordinates: [
          {^RandomDouble: {min: -118.668469, max: -118.668469}},
          {^RandomDouble: {min: 32.924436, max: 32.924436}}
        ]}}
      }
      policies: {^Array: {number: {^RandomInt: {min: 3, max: 3}}, of: {^Choose: {from: [
        {
          policyType: "life",
          policyNum: &policyNum {^FastRandomString: {length: 1}},
          nextRenewalDt: &nextRenewalDt {^RandomDate: {min: "2017-01-01", max: "2017-12-31"}},
          year: {^RandomInt: {min: 1980, max: 2017}},
          value: {^RandomInt: {min: 500000, max: 500000}},
          model: {^FastRandomString: {length: 1}},
        },
        }
      ]}}}}
  - &Nop {Nop: true}
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  - *Nop

- Name: Quiesce
  Type: QuiesceActor
  Threads: 1
  Database: *DB
  Phases:
  - *Nop
  - Repeat: 1
  - *Nop
  - *Nop
  - *Nop
  - Repeat: 1
  - *Nop

- Name: CreateIndex
  Type: RunCommand
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - *Nop
  - *Nop
  # Create index *after* running some queries without it.
  - Repeat: 1
    Database: *DB
    Operations:
    - OperationName: RunCommand
      OperationCommand:
        createIndexes: Collection0
        indexes:
        - key:
            address.state: 1
            policies.policyType: 1
            policies.insured_person.smoking: 1
            gender: 1
            dob: 1
          name: usefulIndex
  - *Nop
  - *Nop

- Name: RunQueries
  Type: CrudActor
  Threads: 1
  Phases:
  - *Nop
  - *Nop
  - Repeat: 100
    Duration: 5 minutes
    Database: *DB
    Collection: Collection0
    Operations:
    - OperationMetricsName: QueryNoProjectionNoIndex
      OperationName: find
      OperationCommand:
        Filter: &filter {
          gender: "Female",
          dob: {
            # Currently, using generator is the only way to generate date value with the appropriate BSON type.
            # TODO: PERF-2084 Use ^Date instead.
            $gte: {^RandomDate: {min: "1990-01-01", max: "1990-01-01T00:00:00.001"}},
            $lte: {^RandomDate: {min: "1990-12-31", max: "1990-12-31T00:00:00.001"}}
          },
          address.state: "UT",
          policies: {
            $elemMatch: {
              policyType: "life",
              insured_person.smoking: 1
            }
          }
        }
  - Repeat: 100
    Duration: 5 minutes
    Database: *DB
    Collection: Collection0
    Operations:
    - OperationMetricsName: QueryWithProjectionNoIndex
      OperationName: find
      OperationCommand:
        Filter: *filter
        Options:
          Projection: &projection {_id: 0, firstname: 1, lastname: 1, dob: 1}
  - *Nop
  - *Nop
  - Repeat: 1000  # This query is very fast, so we need to run it more times than others.
    Duration: 5 minutes
    Database: *DB
    Collection: Collection0
    Operations:
    - OperationMetricsName: QueryWithProjectionWithIndex
      OperationName: find
      OperationCommand:
        Filter: *filter
        Options:
          Projection: *projection

AutoRun:
- When:
    mongodb_setup:
      $eq:
      - atlas
      - atlas-like-replica.2022-10
      - replica
      - replica-80-feature-flags
      - replica-all-feature-flags
      - single-replica
      - standalone
      - standalone-classic-query-engine
      - standalone-query-stats
      - standalone-sbe
    atlas_setup:
      $neq:
      - M30-repl
    branch_name:
      $neq:
      - v4.0
