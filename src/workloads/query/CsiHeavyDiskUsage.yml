SchemaVersion: 2018-07-01
Owner: Query Execution
Description: |
  This workload measures bulk insert performance against a collection named "coll" in a database
  named "heavy_io". The collection and database must be set up before running the workload. The
  workload itself has no expectations as far as the size or schema of the data are concerned but it
  is only useful when being run against larger datasets to actually generate heavy disk IO.

  Because the workload is targeting large external datasets, it's expected that they would need long
  setup time. To avoid setting up twice, we run two, essentially independent, experiments one after
  anoter. We don't expect the internal state of WiredTiger to matter as the experiments involve
  different indexes, and the inserts into the rowstore itself are ammortized over the large number
  of batches in each experiment.

  The purpose of this workload is to compare the insert performance in the following two situations:
   - "Default" indexes are present - a set of indexes that are typically present on the target
     dataset, those that would be useful for the typical query workloads. These indexes should be
     created prior to running the workload.
   - Only a column store index is present. A column store index isn't expected to realistically
     replace all other indexes in production, but it could replace some and knowing its relative
     performance cost could help make that decision.

Keywords:
  - columnstore
  - analytics
  - scale
  - insert

Clients:
  Default:
    QueryOptions:
      # Allow for longer duration since index builds may take a while.
      socketTimeoutMS: 3_600_000 # = 1 hour
      connectTimeoutMS: 3_600_000

GlobalDefaults:
  # The expected database and collection names.
  Database: &db heavy_io
  Collection: &coll coll

  LoadThreads: &loadThreads 8
  SampleSize: &sampleSize 1000
  Batches: &batches 50 # Per Thread

  ColumnStoreIndexSpec: &columnStoreIndexSpec
    key: {$**: "columnstore"}
    name: "columnstore"

  MaxPhases: &maxPhases 5

ActorTemplates:
  # We want to be able to compare results from the same test between the runs in presence of different
  # indexes. For this we'll have to instantiate the same actor multiple times with a unique name.
  - TemplateName: InsertFromSample
    Config:
      Name: {^Parameter: {Name: "Name", Default: "Insert"}}
      Type: SamplingLoader
      Database: *db
      Collection: *coll
      SampleSize: *sampleSize
      Pipeline: [{$set: {genny_added: true}}]
      Threads: *loadThreads
      Phases:
        OnlyActiveInPhases:
          Active: [{^Parameter: {Name: "OnlyActiveInPhase", Default: 1024}}] # do not run by default
          NopInPhasesUpTo: *maxPhases
          PhaseConfig:
            InsertBatchSize: *sampleSize
            Repeat: 1
            Batches: *batches

Actors:
  - Name: Quiesce
    Type: QuiesceActor
    Threads: 1
    Database: *db
    Phases:
      OnlyActiveInPhases:
        Active: [0, 4]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 1

  - ActorFromTemplate:
      TemplateName: InsertFromSample
      TemplateParameters:
        Name: DefaultIndexes
        OnlyActiveInPhase: 1

  # The insert tests add 1000*50*8 = 400,000 records, which might be significant comparing to the
  # collection size, so let's remove the inserted records before running the next test.
  - Name: DeleteInserted
    Type: CrudActor
    Database: *db
    Phases:
      OnlyActiveInPhases:
        Active: [2]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 1
          MetricsName: ignore
          Database: *db
          Collection: *coll
          Operations:
            - OperationName: bulkWrite
              OperationCommand:
                WriteOperations:
                  - WriteCommand: deleteMany
                    Filter: {genny_added: true}

  - Name: SwitchToCSI
    Type: RunCommand
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [3]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 1
          Database: *db
          Operations:
            - OperationName: RunCommand
              OperationCommand:
                dropIndexes: *coll
                # This will drop all non-essential indexes (_id and any shard key index remain)
                index: '*'
            - OperationName: RunCommand
              OperationCommand:
                createIndexes: *coll
                indexes:
                  - *columnStoreIndexSpec

  - ActorFromTemplate:
      TemplateName: InsertFromSample
      TemplateParameters:
        Name: Csi
        OnlyActiveInPhase: 5

# TODO PERF-3094: Revive 'AutoRun' configuration when the project is near to a closure.
# AutoRun:
# - When:
#     mongodb_setup:
#       $eq:
#       - standalone-all-feature-flags
#     branch_name:
#       $neq:
#       - v4.0
#       - v4.2
#       - v4.4
#       - v5.0
#       - v5.3
#       - v6.0
#     ThenRun:
#     - test_control: bestbuy_inserts
