SchemaVersion: 2018-07-01
Owner: Query Execution
Description: |
  This workload compares the query performance with columnar indexes to performances without them.

  The workload consists of the following phases and actors:
    0. Warm up cache.
    1. Run queries with columnstore indexes.
    2. Drop columnstore indexes.
    3. Warm up cache again for regular scans.
    4. Run queries without columnstore indexes.

Keywords:
  - columnstore
  - analytics

Clients:
  Default:
    QueryOptions:
      # Allow for longer duration since column store index build may take a while.
      socketTimeoutMS: 3_600_000 # = 1 hour
      connectTimeoutMS: 3_600_000

# Defines the database name.
Database: &db charts-metrics

# Defines the collection name.
Collection: &Collection events

CountPerActionQuery: &CountPerActionQuery
  aggregate: *Collection
  pipeline:
    [{ "$group": { "_id": "$action", o: { $sum: 1 } } }, { "$limit": 5000 }]
  allowDiskUse: true
  cursor: {}

TotalTenantCreatedQuery: &TotalTenantCreatedQuery
  aggregate: *Collection
  pipeline:
    [
      { "$match": { "metadata.target": "cloud" } },
      {
        "$group":
          { "_id": {}, "__alias_0": { "$addToSet": "$metadata.tenant_id" } },
      },
      { "$project": { "_id": 0, "__alias_0": { "$size": "$__alias_0" } } },
      { "$project": { "value": "$__alias_0", "_id": 0 } },
      { "$limit": 5000 },
    ]
  cursor: {}

Date1: &DateForActiveCloudUsersLastMonthQuery
  LoadConfig:
    Path: "../../phases/query/GetBsonDate.yml"
    Key: GetBsonDate
    Parameters:
      date: "2020-03-09T01:10:04"

ActiveCloudUsersLastMonthQuery: &ActiveCloudUsersLastMonthQuery
  aggregate: *Collection
  pipeline:
    [
      { "$addFields": { "target": 3000 } },
      {
        "$match":
          {
            "metadata.target": { "$in": ["cloud"] },
            "created_at": { "$gte": *DateForActiveCloudUsersLastMonthQuery },
            "resource": { "$in": ["Dashboard"] },
          },
      },
      {
        "$group":
          {
            "_id": {},
            "__alias_0": { "$addToSet": "$user_id" },
            "__alias_1": { "$min": "$target" },
          },
      },
      {
        "$project":
          { "_id": 0, "__alias_0": { "$size": "$__alias_0" }, "__alias_1": 1 },
      },
      {
        "$project": { "value": "$__alias_0", "target": "$__alias_1", "_id": 0 },
      },
      { "$limit": 5000 },
    ]
  cursor: {}

Date2: &DateForVersionHistogramQuery
  LoadConfig:
    Path: "../../phases/query/GetBsonDate.yml"
    Key: GetBsonDate
    Parameters:
      date: "2020-04-02T01:10:52"

VersionsHistogramQuery: &VersionsHistogramQuery
  aggregate: *Collection
  pipeline:
    [
      { "$match": { "metadata.target": { "$exists": true } } },
      {
        "$match":
          {
            "created_at": { "$gte": *DateForVersionHistogramQuery },
            "metadata.version": { "$nin": [null] },
            "resource": { "$nin": ["Error"] },
          },
      },
      {
        "$group":
          {
            "_id":
              {
                "__alias_0": "$metadata.version",
                "__alias_1": "$metadata.target",
              },
            "__alias_2": { "$sum": 1 },
          },
      },
      {
        "$project":
          {
            "_id": 0,
            "__alias_0": "$_id.__alias_0",
            "__alias_1": "$_id.__alias_1",
            "__alias_2": 1,
          },
      },
      {
        "$project":
          {
            "x": "$__alias_0",
            "y": "$__alias_2",
            "color": "$__alias_1",
            "_id": 0,
          },
      },
      { "$limit": 50000 },
    ]
  cursor: {}

Date3: &DateForUniqueUsersPerMonthQuery
  LoadConfig:
    Path: "../../phases/query/GetBsonDate.yml"
    Key: GetBsonDate
    Parameters:
      date: "2019-07-09T01:12:32"

UniqueUsersPerMonthQuery: &UniqueUsersPerMonthQuery
  aggregate: *Collection
  pipeline:
    [
      {
        "$match":
          {
            "resource": { "$in": ["Dashboard"] },
            "created_at": { "$gte": *DateForUniqueUsersPerMonthQuery },
            "metadata.target": { "$nin": [null, ""] },
          },
      },
      {
        "$addFields":
          {
            "created_at":
              {
                "$cond":
                  {
                    "if": { "$eq": [{ "$type": "$created_at" }, "date"] },
                    "then": "$created_at",
                    "else": null,
                  },
              },
          },
      },
      {
        "$addFields":
          {
            "__alias_0":
              {
                "year": { "$year": "$created_at" },
                "month": { "$subtract": [{ "$month": "$created_at" }, 1] },
              },
          },
      },
      {
        "$group":
          {
            "_id":
              { "__alias_0": "$__alias_0", "__alias_1": "$metadata.target" },
            "__alias_2": { "$addToSet": "$user_id" },
          },
      },
      {
        "$project":
          {
            "_id": 0,
            "__alias_0": "$_id.__alias_0",
            "__alias_1": "$_id.__alias_1",
            "__alias_2": { "$size": "$__alias_2" },
          },
      },
      {
        "$project":
          {
            "x": "$__alias_0",
            "y": "$__alias_2",
            "color": "$__alias_1",
            "_id": 0,
          },
      },
      { "$sort": { "x.year": 1, "x.month": 1 } },
      { "$limit": 5000 },
    ]
  cursor: {}

Date4: &DateForTopErrorsQuery
  LoadConfig:
    Path: "../../phases/query/GetBsonDate.yml"
    Key: GetBsonDate
    Parameters:
      date: "2020-04-02T01:13:04"

TopErrorsQuery: &TopErrorsQuery
  aggregate: *Collection
  pipeline:
    [
      {
        "$match":
          {
            "created_at": { "$gte": *DateForTopErrorsQuery },
            "resource": { "$in": ["Error"] },
          },
      },
      {
        "$group":
          {
            "_id":
              {
                "__alias_0": "$metadata.message",
                "__alias_1": "$metadata.name",
                "__alias_2": "$metadata.version",
              },
            "__alias_3": { "$sum": 1 },
            "__alias_4": { "$addToSet": "$stitch_user_id" },
          },
      },
      {
        "$project":
          {
            "_id": 0,
            "__alias_0": "$_id.__alias_0",
            "__alias_1": "$_id.__alias_1",
            "__alias_2": "$_id.__alias_2",
            "__alias_3": 1,
            "__alias_4": { "$size": "$__alias_4" },
          },
      },
      {
        "$project":
          {
            "group": "$__alias_0",
            "value": "$__alias_3",
            "group_series_0": "$__alias_1",
            "group_series_1": "$__alias_2",
            "value_series_0": "$__alias_4",
            "_id": 0,
          },
      },
      { "$limit": 50000 },
    ]
  cursor: {}

Date5: &DateForNumberOfChartsPerTypeQuery
  LoadConfig:
    Path: "../../phases/query/GetBsonDate.yml"
    Key: GetBsonDate
    Parameters:
      date: "2020-01-09T01:13:37"

NumberOfChartsPerTypeQuery: &NumberOfChartsPerTypeQuery
  aggregate: *Collection
  pipeline:
    [
      {
        "$match":
          {
            "resource": { "$in": ["DashboardItem"] },
            "action": { "$in": ["added"] },
            "metadata.version": { "$nin": [null, "0.0.0"] },
            "created_at": { "$gte": *DateForNumberOfChartsPerTypeQuery },
          },
      },
      {
        "$group":
          {
            "_id": { "__alias_0": "$metadata.chart_type" },
            "__alias_1": { "$sum": 1 },
          },
      },
      {
        "$project": { "_id": 0, "__alias_0": "$_id.__alias_0", "__alias_1": 1 },
      },
      { "$project": { "x": "$__alias_1", "y": "$__alias_0", "_id": 0 } },
      { "$limit": 5000 },
    ]
  cursor: {}

Date6: &StartDateForEventsByVersionQuery
  LoadConfig:
    Path: "../../phases/query/GetBsonDate.yml"
    Key: GetBsonDate
    Parameters:
      date: "2020-04-08T01:14:07"

Date7: &EndDateForEventsByVersionQuery
  LoadConfig:
    Path: "../../phases/query/GetBsonDate.yml"
    Key: GetBsonDate
    Parameters:
      date: "2020-04-09T01:14:07"

EventsByVersionQuery: &EventsByVersionQuery
  aggregate: *Collection
  pipeline:
    [
      {
        "$match":
          {
            "created_at":
              {
                "$gte": *StartDateForEventsByVersionQuery,
                "$lte": *EndDateForEventsByVersionQuery,
              },
            "resource": { "$nin": [] },
            "metadata.version": { "$nin": [null] },
          },
      },
      {
        "$addFields":
          {
            "created_at":
              {
                "$cond":
                  {
                    "if": { "$eq": [{ "$type": "$created_at" }, "date"] },
                    "then": "$created_at",
                    "else": null,
                  },
              },
          },
      },
      {
        "$addFields":
          {
            "__alias_0":
              {
                "year":
                  {
                    "$year":
                      { "date": "$created_at", "timezone": "Australia/Sydney" },
                  },
                "month":
                  {
                    "$subtract":
                      [
                        {
                          "$month":
                            {
                              "date": "$created_at",
                              "timezone": "Australia/Sydney",
                            },
                        },
                        1,
                      ],
                  },
                "date":
                  {
                    "$dayOfMonth":
                      { "date": "$created_at", "timezone": "Australia/Sydney" },
                  },
                "hours":
                  {
                    "$hour":
                      { "date": "$created_at", "timezone": "Australia/Sydney" },
                  },
              },
          },
      },
      {
        "$group":
          {
            "_id":
              { "__alias_0": "$__alias_0", "__alias_1": "$metadata.version" },
            "__alias_2": { "$sum": 1 },
          },
      },
      {
        "$project":
          {
            "_id": 0,
            "__alias_0": "$_id.__alias_0",
            "__alias_1": "$_id.__alias_1",
            "__alias_2": 1,
          },
      },
      {
        "$project":
          {
            "x": "$__alias_0",
            "y": "$__alias_2",
            "color": "$__alias_1",
            "_id": 0,
          },
      },
      { "$sort": { "x.year": 1, "x.month": 1, "x.date": 1, "x.hours": 1 } },
      { "$limit": 5000 },
    ]
  cursor: {}

Date8: &DateForBrowserUsageByDistinctUserQuery
  LoadConfig:
    Path: "../../phases/query/GetBsonDate.yml"
    Key: GetBsonDate
    Parameters:
      date: "2020-03-10T01:17:41"

BrowserUsageByDistinctUserQuery: &BrowserUsageByDistinctUserQuery
  aggregate: *Collection
  pipeline:
    [
      { "$match": { "metadata.browser": { "$exists": true } } },
      {
        "$addFields":
          {
            "browserName":
              { "$arrayElemAt": [{ "$split": ["$metadata.browser", " "] }, 0] },
          },
      },
      {
        "$match":
          {
            "browserName": { "$nin": [null, "", "null"] },
            "created_at": { "$gte": *DateForBrowserUsageByDistinctUserQuery },
          },
      },
      {
        "$group":
          {
            "_id": { "__alias_0": "$browserName" },
            "__alias_1": { "$addToSet": "$user_id" },
          },
      },
      {
        "$project":
          {
            "_id": 0,
            "__alias_0": "$_id.__alias_0",
            "__alias_1": { "$size": "$__alias_1" },
          },
      },
      {
        "$project": { "label": "$__alias_0", "value": "$__alias_1", "_id": 0 },
      },
      { "$limit": 5000 },
    ]
  cursor: {}

Date9: &DateForTopTenantsByNoOfEventsQuery
  LoadConfig:
    Path: "../../phases/query/GetBsonDate.yml"
    Key: GetBsonDate
    Parameters:
      date: "2020-03-10T01:17:41"

TopTenantsByNoOfEventsQuery: &TopTenantsByNoOfEventsQuery
  aggregate: *Collection
  pipeline:
    [
      {
        "$match":
          {
            "created_at": { "$gte": *DateForTopTenantsByNoOfEventsQuery },
            "resource": { "$nin": ["DashboardItem", "EmbeddedChart", "Error"] },
            "metadata.target": { "$nin": [null] },
            "metadata.tenant_id": { "$nin": [null] },
          },
      },
      {
        "$group":
          {
            "_id":
              {
                "__alias_0": "$metadata.target",
                "__alias_1": "$metadata.tenant_id",
              },
            "__alias_2": { "$sum": 1 },
          },
      },
      {
        "$project":
          {
            "_id": 0,
            "__alias_0": "$_id.__alias_0",
            "__alias_1": "$_id.__alias_1",
            "__alias_2": 1,
          },
      },
      {
        "$project":
          {
            "color": "$__alias_0",
            "x": "$__alias_2",
            "y": "$__alias_1",
            "_id": 0,
          },
      },
      { "$limit": 50000 },
    ]
  cursor: {}

# Defines test operations.
# Here we use explain with verbosity = execustionStats instead of using plain aggregate command
# so that aggregate pipeline runs to completion but yet we don't need to exhaust cursor. As of now
# we don't have an easy way to exhaust cursor.
TestOperations: &TestOperations
  - OperationMetricsName: CountPerActionQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *CountPerActionQuery
      verbosity: executionStats
  - OperationMetricsName: TotalTenantCreatedQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *TotalTenantCreatedQuery
      verbosity: executionStats
  - OperationMetricsName: ActiveCloudUsersLastMonthQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *ActiveCloudUsersLastMonthQuery
      verbosity: executionStats
  - OperationMetricsName: VersionsHistogramQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *VersionsHistogramQuery
      verbosity: executionStats
  - OperationMetricsName: UniqueUsersPerMonthQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *UniqueUsersPerMonthQuery
      verbosity: executionStats
  - OperationMetricsName: TopErrorsQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *TopErrorsQuery
      verbosity: executionStats
  - OperationMetricsName: NumberOfChartsPerTypeQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *NumberOfChartsPerTypeQuery
      verbosity: executionStats
  - OperationMetricsName: EventsByVersionQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *EventsByVersionQuery
      verbosity: executionStats
  - OperationMetricsName: BrowserUsageByDistinctUserQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *BrowserUsageByDistinctUserQuery
      verbosity: executionStats
  - OperationMetricsName: TopTenantsByNoOfEventsQuery
    OperationName: RunCommand
    OperationCommand:
      explain: *TopTenantsByNoOfEventsQuery
      verbosity: executionStats

# Defines how many times each test operation is executed.
TestRepeatCount: &TestRepeatCount 1

SetupPhase: &SetupPhase 0
BuildColumnStoreIndexPhase: &BuildColumnStoreIndexPhase 1
WarmupCache1Phase: &WarmupCache1Phase 2
ColumnstoreScanPhase: &ColumnstoreScanPhase 3
DropColumnstoreIndexPhase: &DropColumnstoreIndexPhase 4
WarmupCache2Phase: &WarmupCache2Phase 5
CollScanPhase: &CollScanPhase 6
MaxPhases: &MaxPhases 6

ColumnStoreIndexName: &ColumnStoreIndexName $**_columnstore

Actors:
  - Name: Setup
    Type: AdminCommand
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [*SetupPhase]
        NopInPhasesUpTo: *MaxPhases
        PhaseConfig:
          Repeat: 1
          Thread: 1
          Database: admin
          Operations:
            - OperationName: AdminCommand
              OperationCommand:
                setParameter: 1
                internalQueryFrameworkControl: "trySbeEngine"

  - Name: BuildColumnStoreIndex
    Type: RunCommand
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [*BuildColumnStoreIndexPhase]
        NopInPhasesUpTo: *MaxPhases
        PhaseConfig:
          Repeat: 1
          Thread: 1
          Database: *db
          Operations:
            - OperationMetricsName: BulkBuildColumnStoreIndex
              OperationName: RunCommand
              OperationCommand:
                createIndexes: *Collection
                indexes:
                  - key: { "$**": "columnstore" }
                    name: *ColumnStoreIndexName

  # The 'WarmupCache1' actor warms up the buffer cache.
  - Name: WarmupCache1
    Type: RunCommand
    Database: *db
    Thread: 1
    Phases:
      OnlyActiveInPhases:
        Active: [*WarmupCache1Phase]
        NopInPhasesUpTo: *MaxPhases
        PhaseConfig:
          Repeat: 1
          Threads: 1
          Database: *db
          Operations: *TestOperations

  # The 'ColumnstoreScan' actor measures the perf with columnar indexes.
  - Name: ColumnstoreScan
    Type: RunCommand
    Database: *db
    Phases:
      OnlyActiveInPhases:
        Active: [*ColumnstoreScanPhase]
        NopInPhasesUpTo: *MaxPhases
        PhaseConfig:
          Repeat: *TestRepeatCount
          Database: *db
          Operations: *TestOperations

  # The 'DropColumnstoreIndexes' actor drops columnstore indexes.
  - Name: DropColumnstoreIndex
    Type: RunCommand
    Database: *db
    Phases:
      OnlyActiveInPhases:
        Active: [*DropColumnstoreIndexPhase]
        NopInPhasesUpTo: *MaxPhases
        PhaseConfig:
          Repeat: 1
          Threads: 1
          Database: *db
          Operations:
            - OperationName: RunCommand
              OperationCommand:
                dropIndexes: *Collection
                index: *ColumnStoreIndexName

  # The 'WarmupCache2' actor warms up the buffer cache for a regular scan.
  - Name: WarmupCache2
    Type: RunCommand
    Database: *db
    Phases:
      OnlyActiveInPhases:
        Active: [*WarmupCache2Phase]
        NopInPhasesUpTo: *MaxPhases
        PhaseConfig:
          Repeat: 1
          Threads: 1
          Database: *db
          Operations: *TestOperations

  # The 'CollScan' actor measures the perf without columnar indexes.
  - Name: CollScan
    Type: RunCommand
    Database: *db
    Phases:
      OnlyActiveInPhases:
        Active: [*CollScanPhase]
        NopInPhasesUpTo: *MaxPhases
        PhaseConfig:
          Repeat: *TestRepeatCount
          Database: *db
          Operations: *TestOperations
# TODO PERF-3094: Revive 'AutoRun' configuration when the project is near to a closure.
# AutoRun:
# - When:
#     mongodb_setup:
#       $eq:
#       - standalone-all-feature-flags
#     branch_name:
#       $neq:
#       - v4.0
#       - v4.2
#       - v4.4
#       - v5.0
#       - v5.3
#       - v6.0
#     ThenRun:
#     - test_control: charts_events_1G
