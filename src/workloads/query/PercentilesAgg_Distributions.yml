SchemaVersion: 2018-07-01
Owner: "@mongodb/query-execution"
Description: |
  Run tests for $percentile accumulator over various data distributions. We create a new collection
  for each distribution as putting the fields into the same document might be impacted by how much
  bson needs to be parsed to access the field but we want to make sure we compare apples to apples.

Keywords:
- group
- percentile

AutoRun:
- When:
    mongodb_setup:
      $eq:
      - standalone-all-feature-flags
    branch_name:
      $neq:
      - v4.0
      - v4.2
      - v4.4
      - v5.0
      - v6.0

GlobalDefaults:
  MaxPhases: &maxPhases 64
  Database: &db percentiles

  # The Loader actor creates collections named "Collection<N>" where N corresponds to the thread's
  # number. We'll use a single collection, created by a single thread, so it becomes 'Collection0'.
  Collection: &coll Collection0

  DocumentCount: &docCount 1e7

ActorTemplates:
- TemplateName: CreateDataset
  Config:
    Name: "CreateDataset"
    Type: Loader
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [{^Parameter: {Name: "OnlyActiveInPhase", Default: 1024}}]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Threads: 1
          Repeat: 1
          Database: *db
          CollectionCount: 1
          DocumentCount: *docCount
          BatchSize: 1000
          Document:
            _id: {^Inc: {start: 0}}
            data: {^Parameter: {Name: "Data", Default: 0}}

# The specific percentile and the number of them doesn't affect t-digest much as it spends most time
# creating the representation of the inputs that is suitable for computing _any_ percentile.
- TemplateName: ComputePercentile
  Config:
    Name: {^Parameter: {Name: "Name", Default: "ComputePercentile"}}
    Type: CrudActor
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [{^Parameter: {Name: "OnlyActiveInPhase", Default: 1024}}]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 20
          Database: *db
          Collection: *coll
          Operations:
          - OperationName: aggregate
            OperationCommand:
              Pipeline: [
                {$group: {
                  _id: null,
                  p: {$percentile: {p: [0.01, 0.5, 0.99], input: "$data", method: "approximate" }}
                }},
              ]

# During development of $percentile we compared its performance to $min and $minN. We don't need to
# keep running the tests for these but we'd like to keep the templates around for reference and ease
# of rerunning the local experiments if needed in the future.
- TemplateName: ComputeMinN
  Config:
    Name: {^Parameter: {Name: "Name", Default: "ComputeMinN"}}
    Type: CrudActor
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [{^Parameter: {Name: "OnlyActiveInPhase", Default: 1024}}]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 20
          Database: *db
          Collection: *coll
          Operations:
          - OperationName: aggregate
            OperationCommand:
              Pipeline: [{$group: {_id: null, p: {$minN: {n: 5000, input: "$data"}}}}]

- TemplateName: ComputeMin
  Config:
    Name: {^Parameter: {Name: "Name", Default: "ComputeMin"}}
    Type: CrudActor
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [{^Parameter: {Name: "OnlyActiveInPhase", Default: 1024}}]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 20
          Database: *db
          Collection: *coll
          Operations:
          - OperationName: aggregate
            OperationCommand:
              Pipeline: [{$group: { _id: null, p: {$min: "$data"}}}]

# *0 - create dataset
# *1 - warm up or quiese but they don't seem to affect the numbers, so we are not doing either
# *2 - compute percentiles
# [*3-*8] - compute something else on this dataset if so desired
# *9 - drop the dataset

Actors:
- Name: DropCollection
  Type: CrudActor
  Database: *db
  Threads: 1
  Phases:
    OnlyActiveInPhases:
      Active: [9, 19, 29, 39, 49, 59]
      NopInPhasesUpTo: *maxPhases
      PhaseConfig:
        Repeat: 1
        Collection: *coll
        Operations:
        - OperationName: drop

- ActorFromTemplate:
    TemplateName: CreateDataset
    TemplateParameters:
      OnlyActiveInPhase: 0
      Data: {^RandomDouble: {distribution: uniform, min: 0.0, max: 100.0}}

- ActorFromTemplate:
    TemplateName: ComputePercentile
    TemplateParameters:
      Name: "uniform_percentile"
      OnlyActiveInPhase: 2

- ActorFromTemplate:
    TemplateName: CreateDataset
    TemplateParameters:
      OnlyActiveInPhase: 10
      Data: {^RandomDouble: {distribution: normal, mean: 50.0, sigma: 10.0}}

- ActorFromTemplate:
    TemplateName: ComputePercentile
    TemplateParameters:
      Name: "normal_percentile"
      OnlyActiveInPhase: 12

- ActorFromTemplate:
    TemplateName: CreateDataset
    TemplateParameters:
      OnlyActiveInPhase: 20
      Data: {^RandomDouble: {distribution: exponential, lambda: 1.0}}

- ActorFromTemplate:
    TemplateName: ComputePercentile
    TemplateParameters:
      Name: "exponential_percentile"
      OnlyActiveInPhase: 22

- ActorFromTemplate:
    TemplateName: CreateDataset
    TemplateParameters:
      OnlyActiveInPhase: 30
      Data: {^RandomDouble: {distribution: extreme_value, a: 20.0, b: 2.0}}

- ActorFromTemplate:
    TemplateName: ComputePercentile
    TemplateParameters:
      Name: "extreme_percentile"
      OnlyActiveInPhase: 32

- ActorFromTemplate:
    TemplateName: CreateDataset
    TemplateParameters:
      OnlyActiveInPhase: 40
      Data: {^RandomDouble: {distribution: weibull, a: 1.0, b: 0.5}}

- ActorFromTemplate:
    TemplateName: ComputePercentile
    TemplateParameters:
      Name: "weibull_percentile"
      OnlyActiveInPhase: 42

# A mix of various distributions, including many duplicated values.
- ActorFromTemplate:
    TemplateName: CreateDataset
    TemplateParameters:
      OnlyActiveInPhase: 50
      Data: {^Choose: {
        from: [
          {^RandomDouble: {distribution: normal, mean: 50.0, sigma: 10.0}},
          {^RandomDouble: {distribution: exponential, lambda: 1.0}},
          {^RandomDouble: {distribution: uniform, min: 0.0, max: 100.0}},
          {^RandomDouble: {distribution: weibull, a: 1.0, b: 0.5}},
          # on 1e7 docs this will produce duplicates, including in the tails of other distributions
          {^RandomInt: {distribution: uniform, min: 0, max: 1000}},
        ]
      }}

- ActorFromTemplate:
    TemplateName: ComputePercentile
    TemplateParameters:
      Name: "mixed_percentile"
      OnlyActiveInPhase: 52


