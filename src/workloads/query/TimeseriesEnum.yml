SchemaVersion: 2018-07-01
Owner: "@mongodb/query"
Description: |
  The queries in this workload exercise group stage that uses an enum like field for the grouping.

Keywords:
  - timeseries
  - aggregate
  - group

GlobalDefaults:
  Database: &database test
  TSCollection: &tsCollection Collection0
  DocumentCount: &documentCount 1e7
  EnumCollection: &enumCollection Collection1
  repeat: &repeat 20
  MetaCount: &metaCount 10
  MaxPhases: &maxPhases 15

Actors:
  # Clear any pre-existing collection state. Helpful to avoid errors during local testing.
  - Name: ClearTimeseriesCollection
    Type: CrudActor
    Database: *database
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [0]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 1
          Threads: 1
          Collection: *tsCollection
          Operations:
            - OperationName: drop

  - Name: ClearEnumCollection
    Type: CrudActor
    Database: *database
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [1]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 1
          Threads: 1
          Collection: *enumCollection
          Operations:
            - OperationName: drop

  - Name: CreateTimeseriesCollection
    Type: RunCommand
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [2]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 1
          Database: *database
          Operation:
            OperationMetricsName: CreateTimeseriesCollection
            OperationName: RunCommand
            OperationCommand:
              {
                create: *tsCollection,
                timeseries:
                  {
                    timeField: "timestamp",
                    metaField: "metadata",
                    granularity: "seconds",
                  },
              }

  - Name: InsertTimeseriesData
    Type: Loader
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [3]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 1
          Threads: 1
          Database: *database
          CollectionCount: 1
          DocumentCount: *documentCount
          BatchSize: 1000
          Document:
            timestamp:
              ^IncDate:
                start: 2022-01-01
                # 100ms step ensures full bucket of 1000 documents under the "seconds" granularity.
                step: 100
            metadata:
              metaField1:
                ^Cycle:
                  ofLength: *metaCount
                  fromGenerator:
                    ^RandomString:
                      length: 6
                      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
              metaField2:
                ^Cycle:
                  ofLength: *metaCount
                  fromGenerator:
                    ^RandomString:
                      length: 6
                      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            heartrate: {^RandomInt: {min: 0, max: 220}}
            state: {^RandomInt: {min: 1, max: 7}}

  - Name: InsertEnumData
    Type: Insert
    Threads: 1
    Database: *database
    Phases:
      - {Nop: true}
      - {Nop: true}
      - {Nop: true}
      - {Nop: true}
      - Collection: *enumCollection
        Document: { id: 1, description: "state1" }
        Repeat: 1
      - Collection: *enumCollection
        Document: { id: 2, description: "state2" }
        Repeat: 1
      - Collection: *enumCollection
        Document: { id: 3, description: "state3" }
        Repeat: 1
      - Collection: *enumCollection
        Document: { id: 4, description: "state4" }
        Repeat: 1
      - Collection: *enumCollection
        Document: { id: 5, description: "state5" }
        Repeat: 1
      - Collection: *enumCollection
        Document: { id: 6, description: "state6" }
        Repeat: 1
      - Collection: *enumCollection
        Document: { id: 7, description: "state7" }
        Repeat: 1
      - {Nop: true}
      - {Nop: true}
      - {Nop: true}
      - {Nop: true}
      - {Nop: true}

# Ensure all data is synced to disk.
  - Name: Quiesce
    Type: QuiesceActor
    Threads: 1
    Database: *database
    Phases:
      OnlyActiveInPhases:
        Active: [11]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: 1
          Threads: 1

  - Name: InFilterGroup
    Type: CrudActor
    Database: *database
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [12]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: *repeat
          Database: *database
          Collection: *tsCollection
          Operations:
            - OperationMetricsName: TsBPEnumInMatch
              OperationName: aggregate
              OperationCommand:
                Pipeline:
                  [
                    { $match: {state: {$in: [1,3,5]}} },
                    { $group: {_id: "$state", "avgHR": {$avg: "$heartrate"}} }
                  ]

  - Name: NotInFilterGroup
    Type: CrudActor
    Database: *database
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [13]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: *repeat
          Database: *database
          Collection: *tsCollection
          Operations:
            - OperationMetricsName: TsBPEnumNotInMatch
              OperationName: aggregate
              OperationCommand:
                Pipeline:
                  [
                    { $match: {state: {$nin: [1,2,4,6,7]}} },
                    { $group: {_id: "$state", "avgHR": {$avg: "$heartrate"}} }
                  ]

  - Name: InFilterLookupGroup
    Type: CrudActor
    Database: *database
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [14]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: *repeat
          Database: *database
          Collection: *tsCollection
          Operations:
            - OperationMetricsName: TsBPEnumInMatchLookup
              OperationName: aggregate
              OperationCommand:
                Pipeline:
                  [
                    { $match: {state: {$in: [1,3,5]}} },
                    { $lookup: {from: *enumCollection, localField: "state", foreignField: "id", as: "stateDoc"} },
                    { $group: {_id: "$stateDoc.description", "avgHR": {$avg: "$heartrate"}} }
                  ]

  - Name: NotInFilterLookupGroup
    Type: CrudActor
    Database: *database
    Threads: 1
    Phases:
      OnlyActiveInPhases:
        Active: [15]
        NopInPhasesUpTo: *maxPhases
        PhaseConfig:
          Repeat: *repeat
          Database: *database
          Collection: *tsCollection
          Operations:
            - OperationMetricsName: TsBPEnumNotInMatchLookup
              OperationName: aggregate
              OperationCommand:
                Pipeline:
                  [
                    { $match: {state: {$nin: [1,2,4,6,7]}} },
                    { $lookup: {from: *enumCollection, localField: "state", foreignField: "id", as: "stateDoc"} },
                    { $group: {_id: "$stateDoc.description", "avgHR": {$avg: "$heartrate"}} }
                  ]

AutoRun:
  - When:
      mongodb_setup:
        $eq:
          - replica
          - replica-80-feature-flags
          - replica-all-feature-flags
      branch_name:
        $gte: v7.0