SchemaVersion: 2018-07-01

Description: |
  This is a collection of helper scripts used to communicate with mongosync. To use them,
  use LoadConfig and load the script you would like to use in your actor's phase.
  For example:
  - Name: StartMongosync
    Type: ExternalScriptRunner
    Threads: 1
    Phases:
      - LoadConfig:
        Path: ./MongosyncScripts.yml
        Key: StartMongosync

  Note that the polling scripts start with set -eou pipefail so that any
  subcommand run during the script failing will cause the entire script to fail.
  This way if mongosync crashes during the test, it will stop the test execution
  immediately and genny will bubble up the error and fail the test

  For curl commands we pass -s and -S so that an errors are still reported (-S)
  but download progress stats are not logged to stderr

StartMongosync:
  Repeat: 1
  Command: sh
  MetricsName: StartMongosync
  Script: |
    curl -s -S -X POST http://10.2.0.160:27182/api/v1/start \
      -H 'Content-Type: application/json' \
      -d '{"Source": "cluster0", "Destination": "cluster1"}'

PollForCEA:
  Repeat: 1
  Command: sh
  MetricsName: PollForCEA
  Script: |
    set -eou pipefail

    getState() {
      curl -s -S http://10.2.0.160:27182/api/v1/progress | jq '.progress.info' --raw-output
    }

    state=$(getState)
    while [ "$state" != "change event application" ]
    do
      echo "Polling for change event application, current state=$state"
      sleep 1;
      state=$(getState)
    done

DrainWrites:
  Repeat: 1
  Command: sh
  MetricsName: DrainWrites
  Script: |
    set -eou pipefail

    getLag () {
      curl -s -S http://10.2.0.160:27182/api/v1/progress | jq '.progress.lagTimeSeconds'
    }

    lagTime=$(getLag)
    while [ $lagTime -gt 0 ];
    do
      echo "Waiting for writes to drain, currentLag=$lagTime"
      sleep 1;
      lagTime=$(getLag)
    done

Commit:
  Repeat: 1
  Command: sh
  MetricsName: Commit
  Script: |
    curl -s -S -X POST http://10.2.0.160:27182/api/v1/commit \
      -H 'Content-Type: application/json' \
      -d '{}'

WaitForCommit:
  Repeat: 1
  Command: sh
  MetricsName: WaitForCommit
  Script: |
    set -eou pipefail

    getState() {
      curl -s -S http://10.2.0.160:27182/api/v1/progress | jq '.progress.state' --raw-output
    }

    state=$(getState)
    while [ $state != "COMMITTED" ]
    do
      echo "Waiting for commit to finish, state=$state"
      sleep 1;
      state=$(getState)
    done

InsertShortTestData:
  Repeat: 1
  BatchSize: 100
  Threads: 1
  DocumentCount: 1000000
  Database: db

  # Note the document shape and number of collections doesn't
  # really matter here and we are generally just testing the
  # max throughput mongosync can achieve with an unbounded
  # insert workload
  CollectionCount: 1
  Document:
    a: { ^RandomInt: { min: 0, max: 1000000 } }
    b: { ^RandomString: { length: 8 } }
    c: { ^RandomString: { length: 20 } }
  Indexes:
  - keys: { id: 1 }
  - keys: { a: 1 }
