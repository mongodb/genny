---

Tests:

  # These tests use large numbers for number parameters
  # because short numbers get automatically narrowed to
  # int32s whereas number value-generators always produce
  # int64s.

  - Name: Must be mapping type
    GivenTemplate: a
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: null
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: [sequence, value]
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Must be mapping type
    GivenTemplate: []
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Simple scalar map
    GivenTemplate: {a: a}
    ThenReturns: [{a: a}, {a: a}]

  - Name: Two-key scalar map
    GivenTemplate: {a: 1, b: 2}
    ThenReturns: [{a: 1, b: 2}]

  - Name: Null scalar
    GivenTemplate: {a: null}
    ThenReturns: [{a: null}, {a: null}]

  - Name: Array without templates
    GivenTemplate: {vals: [sequence, value]}
    ThenReturns: [{vals: [sequence, value]}]

  - Name: Doubles
    GivenTemplate: {a: 3.0}
    ThenReturns: [{a: 3.0}]

  - Name: Empty arrays
    GivenTemplate: {a: []}
    ThenReturns: [{a: []}]

  - Name: Array of mixed-types without templates
    GivenTemplate: {a: ["foo", 2147483648]}
    ThenReturns: [{a: ["foo", 2147483648]}]

  - Name: Array of mixed-types without templates
    GivenTemplate:
      {a: [2147483648, 269849313357703264, 3.14, string, true, null]}
    ThenReturns:
      - {a: [2147483648, 269849313357703264, 3.14, string, true, null]}

  - Name: Empty array
    GivenTemplate: {a: []}
    ThenReturns: [{a: []}]

  - Name: Array
    GivenTemplate:
      a: {^Array: {of: 1, number: 1}}
    ThenReturns:
      - {a: [1]}
      - {a: [1]}
      - {a: [1]}
      - {a: [1]}
      - {a: [1]}

  - Name: Array10
    GivenTemplate:
      a: {^Array: {of: 1, number: 10}}
    ThenReturns:
      - {a: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}

  - Name: ArrayRandomLen
    GivenTemplate:
      a: {^Array: {of: 1, number: {^RandomInt: {min: 1, max: 5}}}}
    ThenReturns:
      - {a: [1]}
      - {a: [1]}
      - {a: [1]}
      - {a: [1]}
      - {a: [1, 1]}
      - {a: [1, 1, 1, 1, 1]}

  - Name: ArrayDoc
    GivenTemplate:
      a: {^Array: {of: {"first": 1}, number: 1}}
    ThenReturns:
      - {a: [{"first": 1}]}

  - Name: ArrayRandomInt
    GivenTemplate:
      a: {^Array: {of: {"first": {^RandomInt: {min: 10000000000, max: 10000000010}}}, number: 1}}
    ThenReturns:
      - {a: [{"first": 10000000001 }]}

  - Name: ArrayInc
    GivenTemplate:
      a: {^Array: {of: {^Inc: {start: 10000000000, step: 1, multiplier: 0}}, number: 5}}
    ThenReturns:
      - {a: [10000000000,10000000001,10000000002,10000000003,10000000004]}

  - Name: ArrayChoose
    GivenTemplate:
      a: {^Array: {of: {^Choose: {from: [1, "abc", {a: 1}]}}, number: {^RandomInt: {min: 1, max: 5}}}}
    ThenReturns:
      - {a: [1] }
      - {a: ["abc"] }
      - {a: [ 1, 1, 1, { "a": 1 }, 1 ] }
      - {a: [ { "a": 1 }, 1, { "a": 1 } ] }
      - {a: [ 1, 1, { "a": 1 }, 1, "abc" ] }

  - Name: Generate Array with deterministic choose where 'number' is greater than size of 'from'
    GivenTemplate:
      a: {^Array: {of: {^Choose: {from: [1, 2, 3], deterministic: true}}, number: 6}}
    ThenReturns:
      - {a: [ 1, 2, 3, 1, 2, 3 ] }
      - {a: [ 1, 2, 3, 1, 2, 3 ] }
      - {a: [ 1, 2, 3, 1, 2, 3 ] }

  - Name: Generate Array with deterministic choose where 'number' is 1
    GivenTemplate:
      a: {^Array: {of: {^Choose: {from: [1, 2, 3], deterministic: true}}, number: 1}}
    ThenReturns:
      - {a: [ 1 ] }
      - {a: [ 2 ] }
      - {a: [ 3 ] }

  - Name: Generate Array with deterministic deterministic where 'number' is smaller than size of 'from'
    GivenTemplate:
      a: {^Array: {of: {^Choose: {from: [1, 2, 3], deterministic: true}}, number: 2}}
    ThenReturns:
      - {a: [ 1, 2 ] }
      - {a: [ 3, 1 ] }
      - {a: [ 2, 3 ] }

  - Name: Choose InvalidValueGeneratorSyntax
    GivenTemplate: {a: {^Choose: {from: [1, "a", 2], deterministic: true, weights: [1, 1, 1]}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: ArrayChooseNestedGenerator
    GivenTemplate:
      a: {^Array: {number: 4, of: {^Choose: {from: [
        {b: {^RandomInt: {min: 200, max: 500}}},
        {c: {^RandomInt: {min: -500, max: -200}}}
      ]}}}}
    ThenReturns:
      - { "a" : [ { "b" : { "$numberLong" : "206"} },
        { "b" : { "$numberLong" : "448"} },
        { "c" : { "$numberLong" : "-380"} },
        { "b" : { "$numberLong" : "262"} } ] }
      - { "a" : [ { "b" : { "$numberLong" : "358"} },
        { "b" : { "$numberLong" : "379"} },
        { "c" : { "$numberLong" : "-433"} },
        { "b" : { "$numberLong" : "369"} } ] }
      - { "a" : [ { "c" : { "$numberLong" : "-402"} },
        { "b" : { "$numberLong" : "493"} },
        { "b" : { "$numberLong" : "472"} },
        { "c" : { "$numberLong" : "-225"} } ] }

  - Name: Array Complex Docs
    GivenTemplate:
      a: {^Array: {of: { ts: {^RandomDate: {min: "2020-01-01", max: "2021-01-01"}},
                         caid: { ^RandomInt: { min: 0, max: 1000 } },
                         cuid: { ^RandomInt: { min: 0, max: 100000 } },
                         prod: { ^RandomInt: { min: 0, max: 10000 } },
                         prid: { ^RandomDouble: { min: 0.0, max: 1000.0 } },
                         data: {^Join: {array: ["aaaaaaaaaa", {^FastRandomString: {length: {^RandomInt: {min: 0, max: 10}}}}]}}},
                      number: 2}}
    ThenReturns:
      - {a: [
          { "ts" : { "$date" : { "$numberLong" : "1582750578258" },
            "caid": { "$numberLong": "107" },
            "cuid": { "$numberLong": "2216" },
            "prod": {"$numberLong": "730" },
            "prid": { "$numberDouble": "343.47207427608100261"},
            "data": "aaaaaaaaaaIqrjrvuHk"}},
          { "ts" : { "$date" : { "$numberLong" : "1586061958897" },
            "caid": { "$numberLong": "399" },
            "cuid": { "$numberLong": "13803" },
            "prod": {"$numberLong": "4815" },
            "prid": { "$numberDouble": "206.31674870518841658"},
            "data" : "aaaaaaaaaaoEtN" }}
        ]}

  - Name: Object Generator
    GivenTemplate:
      a: {^Object: {withNEntries: 10, havingKeys: {^RandomString: {length: 10}}, andValues: {^Inc: {}}}}
    ThenReturns:
      - a:
          JGBEV0zQZI: { "$numberLong": "1" }
          eNbthBtmrZ: { "$numberLong": "2" }
          Odzj7TUCi+: { "$numberLong": "3" }
          SD6jA6Y+bp: { "$numberLong": "4" }
          kmFT2CuKVC: { "$numberLong": "5" }
          AFFXQ8ULbz: { "$numberLong": "6" }
          Naqsr/zBMQ: { "$numberLong": "7" }
          AzUNSxcpt0: { "$numberLong": "8" }
          xYYXCh/Ybl: { "$numberLong": "9" }
          EHcmXZX/d4: { "$numberLong": "10" }

  - Name: one RandomInt
    GivenTemplate: {a: {^RandomInt: {min: 10000000000, max: 10000000010}}}
    ThenReturns: [{a: 10000000001}, {a: 10000000001}, {a: 10000000000}]

  - Name: two RandomInts in map
    GivenTemplate:
      a: {^RandomInt: {min: 10000000050, max: 10000000060}}
      b: {^RandomInt: {min: 10000000030, max: 10000000040}}
    ThenReturns:
    -  {a: 10000000051, b: 10000000031}
    -  {a: 10000000050, b: 10000000030}

  - Name: RandomInt and literal
    GivenTemplate:
      a:
        - {^RandomInt: {min: 10000000010, max: 10000000010}}
        - {^RandomInt: {min: 10000000010, max: 10000000010}}
        - 10000000010
    ThenReturns:
    - {a: [10000000010, 10000000010, 10000000010]}
    - {a: [10000000010, 10000000010, 10000000010]}
    - {a: [10000000010, 10000000010, 10000000010]}

  - Name: RandomInt recursively applied
    GivenTemplate:
      a:
        - ^RandomInt:
            min: 10000000020
            max: {^RandomInt: {min: 10000000020, max: 10000000020}}
        - ^RandomInt:
            min: {^RandomInt: {min: 10000000020, max: 10000000020}}
            max: 10000000020
        - 10000000020
    ThenReturns: [{a: [10000000020, 10000000020, 10000000020]}]

  - Name: two RandomInts in list
    GivenTemplate:
      a:
        - {^RandomInt: {min: 10000000050, max: 10000000060}}
        - {^RandomInt: {min: 10000000030, max: 10000000040}}
    ThenReturns: [{a: [10000000051, 10000000031]}]

  - Name: Mixing ^ keys with other keys
    GivenTemplate: {a: {otherKey: 1, ^RandomInt: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Mixing ^ other keys before
    GivenTemplate: {a: {extraKeyBefore: 1, ^RandomInt: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Bare ^ at top-level
    GivenTemplate: {^RandomInt: {min: 50, max: 60}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Unknown expression-type
    GivenTemplate: {a: {^NonExistent: {min: 50, max: 60}}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: some kind of sub-args work fine
    GivenTemplate: {a: {min: 10000000050, max: 10000000060}}
    ThenReturns:
      - {a: {min: 10000000050, max: 10000000060}}
      - {a: {min: 10000000050, max: 10000000060}}

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: [], max: 60}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: 50, max: []}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: fifty, max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: "7"}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: 7}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid RandomInt type
    GivenTemplate:
      a: {^RandomInt: []}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid types in min/max
    GivenTemplate:
      a: {^RandomInt: {min: 50.0, max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid missing min
    GivenTemplate:
      a: {^RandomInt: {max: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid missing max
    GivenTemplate:
      a: {^RandomInt: {min: 10}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Explicit uniform distribution
    GivenTemplate:
      a:
        ^RandomInt:
          distribution: uniform
          min: 10000000050
          max: 10000000060
    ThenReturns:
      - {a: 10000000051}
      - {a: 10000000051}
      - {a: 10000000050}
      - {a: 10000000050}

  - Name: Explicit uniform distribution no min/max
    GivenTemplate:
      a: {^RandomInt: {distribution: uniform}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial Distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 1000000000100, p: 0.05}}
    ThenReturns:
      - {a: 49999826145}
      - {a: 49999781149}
      - {a: 49999658202}
      - {a: 49999742557}
      - {a: 49999965269}
      - {a: 49999907378}
      - {a: 50000002150}
      - {a: 49999810834}
      - {a: 50000057754}
      - {a: 49999867437}

  - Name: Binomial requires t and p
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 100}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires t
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Binomial requires int t
    GivenTemplate:
      a: {^RandomInt: {distribution: binomial, t: 100.5, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial Distribution
    GivenTemplate:
      a:
        ^RandomInt:
          distribution: negative_binomial
          k: 1000000000100
          p: 0.05
    ThenReturns:
      - {a: 19000007423599}
      - {a: 19000004398697}
      - {a: 19000014023172}
      - {a: 18999993317885}
      - {a: 18999998293903}
      - {a: 18999984525288}
      - {a: 18999991814976}
      - {a: 18999999857658}
      - {a: 19000040152791}
      - {a: 19000006530453}

  - Name: Negative Binomial requires k and p
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, k: 100}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires k
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Negative Binomial requires int k
    GivenTemplate:
      a: {^RandomInt: {distribution: negative_binomial, k: 100.5, p: 0.5}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Geometric distribution requires p
    GivenTemplate:
      a: {^RandomInt: {distribution: geometric}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Poisson distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: poisson, mean: 10000000000000}}
    ThenReturns:
      - {a: 9999997460716}
      - {a: 9999996810402}
      - {a: 9999995032424}
      - {a: 9999996252254}
      - {a: 9999999467960}
      - {a: 9999998633266}
      - {a: 9999999999435}
      - {a: 9999997239501}
      - {a: 10000000798072}
      - {a: 9999998056959}

  - Name: Poisson distribution requires mean
    GivenTemplate:
      a: {^RandomInt: {distribution: poisson}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Zipfian distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: zipfian, alpha: 1.0, n: 10000}}
    ThenReturns:
      - a: { "$numberLong" : "2185" }
      - a: { "$numberLong" : "3504" }
      - a: { "$numberLong" : "8050" }
      - a: { "$numberLong" : "4890" }
      - a: { "$numberLong" : "347" }
      - a: { "$numberLong" : "3" }
      - a: { "$numberLong" : "4" }
      - a: { "$numberLong" : "784" }
      - a: { "$numberLong" : "202" }
      - a: { "$numberLong" : "2590" }

  - Name: Zipfian distribution requires alpha and n
    GivenTemplate:
      a: {^RandomInt: {distribution: zipfian}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Zipfian distribution requires alpha
    GivenTemplate:
      a: {^RandomInt: {distribution: zipfian, n: 10000}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Zipfian distribution requires n
    GivenTemplate:
      a: {^RandomInt: {distribution: zipfian, alpha: 1.0}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Invalid distribution
    GivenTemplate:
      a: {^RandomInt: {distribution: non_existent}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string
    GivenTemplate:
      a: {^RandomString: {length: 15}}
    ThenReturns:
      - {a: JGBEV0zQZIeNbth}
      - {a: BtmrZOdzj7TUCi+}
      - {a: SD6jA6Y+bpkmFT2}
      - {a: CuKVCAFFXQ8ULbz}
      - {a: Naqsr/zBMQAzUNS}

  - Name: Random string custom alphabet
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: xyz}}
    ThenReturns:
      - {a: xxxxyzzxyxyxyzy}
      - {a: xzyzyxyzyzxxxyz}
      - {a: xxzyxzyzyyyyxxz}
      - {a: xzxyxxxxyxzxxyz}
      - {a: xyyzzzzxxxxzxxx}

  - Name: Random string custom alphabet can repeat chars
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: xxx}}
    ThenReturns:
      - {a: xxxxxxxxxxxxxxx}
      - {a: xxxxxxxxxxxxxxx}

  - Name: Random string requires length
    GivenTemplate:
      a: {^RandomString: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string requires non-empty alphabet if specified
    GivenTemplate:
      a: {^RandomString: {length: 15, alphabet: ''}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Random string random length
    GivenTemplate:
      a:
        ^RandomString:
          length: {^RandomInt: {min: 2, max: 5}}
          alphabet: xyz
    ThenReturns:
      - {a: xx}
      - {a: yz}
      - {a: xyxyx}

  - Name: RandomDataFromDataset requires a path
    GivenTemplate:
      a: {^ChooseFromDataset: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: RandomDataFromDataset requires a file that exists
    GivenTemplate:
      a: {^ChooseFromDataset: {"path": "/tmp/itdoesnotexist"}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: RandomDataFromDataset requires a non-empty file
    GivenTemplate:
      a: {^ChooseFromDataset: {"path": "../../../src/workloads/datasets/empty_test.txt"}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: RandomDataFromDataset returns airport code
    GivenTemplate:
      a: {^ChooseFromDataset: {"path": "../../../src/workloads/datasets/airports_codes.txt"}}
    ThenReturns:
      - {a: CRF}

  - Name: FastRandom string
    GivenTemplate:
      a: {^FastRandomString: {length: 15}}
    ThenReturns:
      - {a: mLkBOvIlHPqgpGD}
      - {a: sMgCKpOisGktHGv}
      - {a: PgJpKoCitPJJPOO}
      - {a: IqrjrvuHkmJFogN}
      - {a: GOHhGiGHLIkLhAq}

  - Name: FastRandomString string requires length
    GivenTemplate:
      a: {^FastRandomString: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: FastRandomString random length
    GivenTemplate:
      a: {^FastRandomString: {length: {^RandomInt: {min: 2, max: 5}}}}
    ThenReturns:
      - {a: qg}
      - {a: kt}
      - {a: JJP}

  - Name: Parameters blow up
    GivenTemplate:
      ^Parameter: {Default: Required, Name: Required}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Verbatim
    GivenTemplate:
      a: {^Verbatim: {^RandomInt: {min: 10000000050, max: 10000000060}}}
    ThenReturns:
      - a: {^RandomInt: {min: 10000000050, max: 10000000060}}

  - Name: Verbatim can break all the rules
    GivenTemplate:
      a:
        ^Verbatim:
          otherKey: 10000000000
          ^RandomInt: {min: 10000000050, max: 10000000060}
    ThenReturns:
      - a:
          otherKey: 10000000000
          ^RandomInt: {min: 10000000050, max: 10000000060}

  - Name: Verbatim as a list
    GivenTemplate:
      a:
        ^Verbatim:
          - ^RandomInt: {min: 10000000050, max: 10000000060}
          - ^RandomString: {length: 10000000015}
          - scalarValue
    ThenReturns:
    - a:
      - ^RandomInt: {min: 10000000050, max: 10000000060}
      - ^RandomString: {length: 10000000015}
      - scalarValue

  - Name: ChooseGenerator
    GivenTemplate:
      a: {^Choose: {from: [1, "abc", {a: 1}]}}
    ThenReturns:
    - a: 1
    - a: 1
    - a: abc
    - a: {a: 1}

  - Name: Join Generator
    GivenTemplate:
      a: {^Join: {array: ["It", "worked"]}}
    ThenReturns:
    - a: "Itworked"

  - Name: Join Generator with seperator
    GivenTemplate:
      a: {^Join: {array: ["It", "worked"], sep: " "}}
    ThenReturns:
    - a: "It worked"

  - Name: Join With Choose
    GivenTemplate:
      a: {^Join: {array: ["Hello",
                          "random",
                          "person:",
                          {^Choose: {from: ["Huey", "Duey",
                                            {^FastRandomString: {length: 10}}]}}], sep: " "}}
    ThenReturns:
    - a: "Hello random person: Huey"
    - a: "Hello random person: Huey"
    - a: "Hello random person: Duey"
    - a: "Hello random person: GOHhGiGHLI"
    - a: "Hello random person: Huey"
    - a: "Hello random person: Huey"
    - a: "Hello random person: IonKmglImH"

  - Name: Join With Deterministic Choose
    GivenTemplate:
      a: {^Object: {withNEntries: 4, havingKeys: {^Join: {array: ["a", {^Choose: {from: ["1", "2"], deterministic: true}}], sep: ""}}, andValues: 1}}
    ThenReturns:
    - a:
        a1: 1
        a2: 1
        a1: 1
        a2: 1
    - a:
        a1: 1
        a2: 1
        a1: 1
        a2: 1 
    - a:
        a1: 1
        a2: 1
        a1: 1
        a2: 1 

  - Name: Concat two singletons
    GivenTemplate:
      a: {^Concat: {arrays: [["It"], ["worked"]]}}
    ThenReturns:
    - a: ["It", "worked"]

  - Name: Concat with ^Array generator
    GivenTemplate:
      a: {^Concat: {arrays: [{^Array: {of: 1, number: 1}}, {^Array: {of: 2, number: 2}}]}}
    ThenReturns:
    - a: [1, 2, 2]

  - Name: Concat with generator and literal
    GivenTemplate:
      a: {^Concat: {arrays: [["Hello", "world"], {^Array: {of: 123, number: 1}}]}}
    ThenReturns:
    - a: ["Hello", "world", 123]

  - Name: Concat with empty arrays
    GivenTemplate:
      a: {^Concat: {arrays: []}}
    ThenReturns:
    - a: []

  - Name: Concat with no arrays argument
    GivenTemplate:
      a: {^Concat: {foo: "bar"}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Concat with non-array arrays argument
    GivenTemplate:
      a: {^Concat: {arrays: "nope"}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Concat with non-array inside of arrays
    GivenTemplate:
      a: {^Concat: {arrays: [[1, 2], "nope"]}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Concat with ^Verbatim array.
    GivenTemplate:
      a: {^Concat: {arrays: [{^Verbatim: [{^RandomInt: "Hello"}]}, ["World"]]}}
    ThenReturns:
    - a: [{^RandomInt: "Hello"}, "World"]

  - Name: Concat with ^Verbatim object is invalid.
    GivenTemplate:
      a: {^Concat: {arrays: [{^Verbatim: {^RandomInt: "Hello"}}, ["World"]]}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: Nested ^Concat
    GivenTemplate:
      a: {^Concat: {arrays: [{^Concat: {arrays: [[1,2], [3, 4]]}}, {^Concat: {arrays: [{^Array: {of: 5, number: 3}}]}}]}}
    ThenReturns:
      - a: [1,2,3,4,5,5,5]

  - Name: Double Generator
    GivenTemplate:
      a: {^RandomDouble: {min: 1.0, max: 20.0}}
      uniform: {^RandomDouble: {distribution: uniform, min: 1.0, max: 20.0}}
      exponential: {^RandomDouble: {distribution: exponential, lambda: 1.0}}
      gamma: {^RandomDouble: {distribution: gamma, alpha: 1.0, beta: 2.0}}
      weibull: {^RandomDouble: {distribution: weibull, a: 1.0, b: 2.0}}
      extremeValue: {^RandomDouble: {distribution: extreme_value, a: 1.0, b: 2.0}}
      beta: {^RandomDouble: {distribution: beta, alpha: 1.0}}
      laplace: {^RandomDouble: {distribution: laplace, mean: 10.1, beta: 2.1}}
      normal: {^RandomDouble: {distribution: normal, mean: 50, sigma: 10.0}}
      lognormal: {^RandomDouble: {distribution: lognormal, m: 1.0, s: 2.0}}
      chisquared: {^RandomDouble: {distribution: chi_squared, n: 10}}
      cauchy: {^RandomDouble: {distribution: cauchy, median: 17.2, sigma: 2.3}}
# The fisherf, studentt, and noncentralchi distributions give different results on different platforms.
#      fisherf: {^RandomDouble: {distribution: fisher_f, m: 12, n: 7}}
#      studentt: {^RandomDouble: {distribution: student_t, n: 17}}
#      noncentralchi: {^RandomDouble: {distribution: non_central_chi_squared, k: 7, lambda: 2}}
    ThenReturns:
    -  "a" : { "$numberDouble" : "3.952394090941460103" }
       "uniform" : { "$numberDouble" : "3.0360695791166998347" }
       "exponential" : { "$numberDouble" : "0.070786395988993736084" }
       "gamma" : { "$numberDouble" : "0.2668568736212015291" }
       "weibull" : { "$numberDouble" : "0.84158009772916297919" }
       "extremeValue" : { "$numberDouble" : "4.3175047395265959693" }
       "beta" : { "$numberDouble" : "0.65807401245179697469" }
       "laplace" : { "$numberDouble" : "8.7629362545759938996" }
       "normal" : { "$numberDouble" : "56.862224120853824161" }
       "lognormal" : { "$numberDouble" : "3.3101941543832040793" }
       "chisquared" : { "$numberDouble" : "8.4397336386305426004" }
       "cauchy" : { "$numberDouble" : "17.921856487345845466" }
#       "fisherf" : { "$numberDouble" : "-36.841317455674790438" }
#       "studentt" : { "$numberDouble" : "0.038230102370708597681" }
#       "noncentralchi" : { "$numberDouble" : "3.4312021039705653536" }
    -  "a" : { "$numberDouble" : "13.904678399652809162" }
       "uniform" : { "$numberDouble" : "8.5867517588073649648" }
       "exponential" : { "$numberDouble" : "0.28141743293595811171" }
       "gamma" : { "$numberDouble" : "2.3605635416844354957" }
       "weibull" : { "$numberDouble" : "3.295743805625172218" }
       "extremeValue" : { "$numberDouble" : "2.1015762758649403352" }
       "beta" : { "$numberDouble" : "0.44276477004055364572" }
       "laplace" : { "$numberDouble" : "9.2638579646169727511" }
       "normal" : { "$numberDouble" : "42.833886919235141022" }
       "lognormal" : { "$numberDouble" : "48.802737274357745889" }
       "chisquared" : { "$numberDouble" : "15.57650159382534838" }
       "cauchy" : { "$numberDouble" : "24.815926471674302434" }
#      "fisherf": { "$numberDouble": "-14.948314077879224726" }
#      "studentt": { "$numberDouble": "-0.14294359511856821743" }
#      "noncentralchi": { "$numberDouble": "13.356763702336033717" }

  - Name: IP Generator
    GivenTemplate:
      a: {^IP: {}}
    ThenReturns:
    - a: "19.227.202.197"
    - a: "13.183.120.74"
    - a: "2.214.68.247"
    - a: "9.91.11.22"

  - Name: Actor ID
    GivenTemplate:
      string: {^ActorIdString: {}}
    ThenReturns:
    - "string": "2"

  - Name: Actor ID
    GivenTemplate:
      int: {^ActorId: {}}
    ThenReturns:
    - { "int" : { "$numberLong" : "2000000000"}}

  - Name: Now
    GivenTemplate:
      date: {^Now: {}}
    ThenExecuteAndIgnore: true

  - Name: Date
    GivenTemplate:
      date: {^Date: "1970-01-01"}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "0" } } }

  - Name: Datetime
    GivenTemplate:
      date: {^Date: "1990-01-01T00:00:00"}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "631152000000" } } }

  - Name: Datetime Zulu
    GivenTemplate:
      date: {^Date: "1990-01-01T00:00:00Z"}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "631152000000" } } }

  - Name: Datetime +tz
    GivenTemplate:
      date: {^Date: "1990-01-01T00:00:00+12:00"}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "631108800000" } } }

  - Name: Datetime -tz
    GivenTemplate:
      date: {^Date: "1990-01-01T00:00:00-06:00"}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "631173600000" } } }

  - Name: Date Mongo Log format
    GivenTemplate:
      date: {^Date: "1990-01-01T00:00:00.858+00:00"}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "631152000858" } } }

  - Name: Date Mongo log format -tz
    GivenTemplate:
      date: {^Date: "1990-01-01T00:00:00.858-06:00"}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "631173600858" } } }

  - Name: Date Mongo log format +tz
    GivenTemplate:
      date: {^Date: "1990-01-01T00:00:00.858+06:00"}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "631130400858" } } }

  # This doesn't make a lot of sense, but it should be possible.
  - Name: Date with IncDate
    GivenTemplate:
      date: {^Date: {^IncDate: {start: "1990-01-01T00:00:00", step: 400}}}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "631152000000" } } }

  # Date: min equal max is invalid.
  - Name: RandomDateMinEqualMax
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01", max: "2020-01-01"}}
    ThenThrows: InvalidValueGeneratorSyntax

  # Date: min must be less than max.
  - Name: RandomDateInvalidMinMax
    GivenTemplate:
      date: {^RandomDate: {min: "2021-01-01", max: "2020-01-01"}}
    ThenThrows: InvalidValueGeneratorSyntax

  # Date: Half Open interval: ["2020-01-01", "2021-01-01").
  - Name: RandomDateMinMax
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01", max: "2021-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    # Check with linux command line `date --utc -d@$((1606971090942 / 1000.0))  +"%Y-%m-%dT%H:%M:%S.%3N"`
    - { "date" : { "$date" : { "$numberLong" : "1582750578258" } } }

  # Date: Half Open interval: ["2020-01-01", "2030-01-01"). 2030-01-01 is the default max date.
  - Name: RandomDateMin
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "2215312351294" } } }
    - { "date" : { "$date" : { "$numberLong" : "2017461232728" } } }
    - { "date" : { "$date" : { "$numberLong" : "1668763329631" } } }
    - { "date" : { "$date" : { "$numberLong" : "1877688312659" } } }

  # Date: Half Open interval: ["1970-01-01", "2021-01-01"). 1970-01-01 is the default min date.
  - Name: RandomDateMax
    GivenTemplate:
      date: {^RandomDate: {max: "2021-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "250092537631" } } }
    - { "date" : { "$date" : { "$numberLong" : "172472167383" } } }

  # Date: 2020-01-01T00:00:00.000 (only one possible value here).
  - Name: RandomDateSingle
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01", max: "2020-01-01T00:00:00.001"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    # Note: this generator can only return a single value.
    - { "date" : { "$date" : { "$numberLong" : "1577836800000" } } }
    - { "date" : { "$date" : { "$numberLong" : "1577836800000" } } }

  # Date: Half Open interval: ["2020-01-01 00:00:00", "2020-06-01T12:00:00").
  - Name: RandomDateRange
    GivenTemplate:
      date: {^RandomDate: {min: "2020-01-01 00:00:00", max: "2020-06-01T12:00:00"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1579884207608" } } }
    - { "date" : { "$date" : { "$numberLong" : "1579248760673" } } }
    - { "date" : { "$date" : { "$numberLong" : "1578128832640" } } }

  # Date: Half Open interval: ["1970-01-01", "2030-01-01").
  - Name: RandomDateFull
    GivenTemplate:
      date: {^RandomDate: {}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "882654257901" } } }
    - { "date" : { "$date" : { "$numberLong" : "608707858109" } } }
    - { "date" : { "$date" : { "$numberLong" : "125897673052" } } }

  # Date: Half Open interval: ["2030-01-01", "2040-01-01").
  - Name: RandomDateFuture
    GivenTemplate:
      date: {^RandomDate: {min: "2030-01-01", max: "2040-01-01"}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1942486378134" } } }
    - { "date" : { "$date" : { "$numberLong" : "1927268986443" } } }

  # Date: Half Open interval: ["2020-01-01", "2020-01-01").
  - Name: RandomDateULL
    GivenTemplate:
      date: {^RandomDate: {min: 1577836800000, max: 1577836800001}}
    ThenReturns:
    # The $date notation is extended json
    # (see https://docs.mongodb.com/manual/reference/mongodb-extended-json/#bson.Date).
    - { "date" : { "$date" : { "$numberLong" : "1577836800000" } } }

  # Date: Random Dates including tz offset.
  # Ensure that the generated value is correct '2013-05-30T00:57:04.299'.
  # Note the +05:30 (Asia/Kolkata) v +06:30 (with incremented hour in the datetime string).
  # As a result, the test fails if the TZ is not correctly processed (max will be less than min).
  - Name: RandomDateKolkata
    GivenTemplate:
      date: {^RandomDate: {min: "2013-05-30T07:27:04.299+06:30", max: "2013-05-30 06:27:04.300+05:30"}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "1369875424299" } } }

  # Date: Random Dates from RandomInt.
  - Name: RandomWithInt
    GivenTemplate:
      date: {^RandomDate: {min: {^RandomInt: {min: 1369875424299, max: 1369875424299}}, max: {^RandomInt: {min: 1369875424300, max: 1369875424300}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "1369875424299" } } }

  # Date: Random Dates from RandomInt Range (note the maximum min value is always less than the minimum max value).
  - Name: RandomWithIntRange
    GivenTemplate:
      date: {^RandomDate: {min: {^RandomInt: {min: 0, max: 1369875424299}}, max: {^RandomInt: {min: 1369875424300, max: 1569875424300}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "238982809626" } } }
    - { "date" : { "$date" : { "$numberLong" : "1206547850279" } } }
    - { "date" : { "$date" : { "$numberLong" : "1228629964909" } } }

  # Date: Random Dates From RandomDouble.
  - Name: RandomFromRandomDouble
    GivenTemplate:
      date: {^RandomDate: {min: {^RandomDouble: {min: 1369875424299, max: 1369875424300}}, max: {^RandomDouble: {min: 1369875424300, max: 1369875424301}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "1369875424299" } } }

  # Date: Random Dates from RandomDouble Range (note the maximum min value is always less than the minimum max value).
  - Name: RandomWithDoubleRange
    GivenTemplate:
      date: {^RandomDate: {min: {^RandomDouble: {min: 0, max: 1369875424299}}, max: {^RandomDouble: {min: 1369875424300, max: 1569875424300}}}}
    ThenReturns:
      - { "date" : { "$date" : { "$numberLong" : "238982806854" } } }
      - { "date" : { "$date" : { "$numberLong" : "1206547848975" } } }
      - { "date" : { "$date" : { "$numberLong" : "1228629955049" } } }

  # Date: Random Dates from FastRandomStrings.
  - Name: RandomDateFromFastRandomString
    GivenTemplate:
      date: {^RandomDate: {min: {^FastRandomString: {length: 1, alphabet: "0"}}, max: {^FastRandomString: {length: 1, alphabet: "1"}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "0" } } }

  # Date: Random Dates from FastRandomStrings.
  - Name: RandomDateFromFastRandomStringRange
    GivenTemplate:
      date: {^RandomDate: {min: {^FastRandomString: {length: 13, alphabet: "0123456789"}}, max: {^FastRandomString: {length: 14, alphabet: "123456789"}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "37861946836783" } } }
    - { "date" : { "$date" : { "$numberLong" : "10867012567549" } } }

  # Date: Random Dates From RandomStrings.
  - Name: RandomDateFromRandomString
    GivenTemplate:
      date: {^RandomDate: {min: {^RandomString: {length: 1, alphabet: "0"}}, max: {^RandomString: {length: 1, alphabet: "1"}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "0" } } }

  # Date: Random Dates From RandomStrings.
  - Name: RandomDateFromRandomStringRange
    GivenTemplate:
      date: {^RandomDate: {min: {^RandomString: {length: 13, alphabet: "0123456789"}}, max: {^RandomString: {length: 14, alphabet: "123456789"}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "4456941826710" } } }
    - { "date" : { "$date" : { "$numberLong" : "58739068492151" } } }

  # Date: Random Dates from Join.
  - Name: RandomDateFromJoin
    GivenTemplate:
      date: {^RandomDate: {min: {^Join: {array: ["2013","05","30T07:27:04.299+06:30"], sep: "-"}}, max: {^Join: {array: ["2013","05","30 06:27:04.300+05:30"], sep: "-"}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "1369875424299" } } }

  # Date: Random Dates from Choose.
  - Name: RandomDateFromChoose
    GivenTemplate:
      date: {^RandomDate: {min: {^Choose: {from: ["2013-05-30T07:27:04.299+06:30", "1970-01-01"]}},
                           max: {^Choose: {from: ["2023-05-30 06:27:04.300+05:30"]}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "1392938007672" } } }  # Thu Feb 20 2014 23:13:27 GMT+0000 must be due to min choice 1
    - { "date" : { "$date" : { "$numberLong" : "1451947229287" } } }  # Mon Jan 04 2016 22:40:29 GMT+0000 must be due to min choice 1
    - { "date" : { "$date" : { "$numberLong" : "1434975126427" } } }  # Mon Jun 22 2015 12:12:06 GMT+0000 must be due to min choice 1
    - { "date" : { "$date" : { "$numberLong" : "1377223224111" } } }  # Fri Aug 23 2013 02:00:24 GMT+0000 must be due to min choice 1
    - { "date" : { "$date" : { "$numberLong" : "672988154402"  } } }  # Tue Apr 30 1991 05:09:14 GMT+0000 must be due to min choice 2

  # Date: Random Dates from Mixed Generators.
  - Name: RandomDateMixed
    GivenTemplate:
      date: {^RandomDate: {min: {^Join: {array: ["2013","05","30T07:27:04.299+06:30"], sep: "-"}}, max: {^Choose: {from: ["2013-05-30 06:27:04.300+05:30"]}}}}
    ThenReturns:
    - { "date" : { "$date" : { "$numberLong" : "1369875424299" } } }

  # Date: RandomDates with invalid generator.
  # Test that the correct exception type is raised (in this case RandomString does not have a len attribute).
  - Name: RandomDateException
    GivenTemplate:
      date: {^RandomDate: {min: {^RandomString: {len: 1, alphabet: "0"}}}}
    ThenThrows: InvalidValueGeneratorSyntax

  # Date: RandomDates with invalid min / max.
  # Test that the correct exception type is raised.
  - Name: RandomDateException
    GivenTemplate:
      date: {
        ^RandomDate: {
          min: {^Choose: {from: ["2013-05-31T07:27:04.299+06:30", "2013-05-31 06:27:04.300+05:30"]}},
          max: {^Choose: {from: ["2013-05-30 06:27:04.300+05:30", "2013-05-30T07:27:04.299+06:30"]}}
        }
      }
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: SimpleIncrement
    GivenTemplate:
      int: {^Inc: {start: 1, multiplier: 100, step: 1}}
    ThenReturns:
    - "int": { "$numberLong" : "201"}
    - "int": { "$numberLong" : "202"}
    - "int": { "$numberLong" : "203"}

  - Name: IncrementWithStep
    GivenTemplate:
      int: {^Inc: {start: 100, multiplier: 200, step: 2}}
    ThenReturns:
    - "int" : { "$numberLong" :"500"}
    - "int" : { "$numberLong" :"502"}
    - "int" : { "$numberLong" :"504"}

  - Name: IncrementWithDefaultStart
    GivenTemplate:
      int: {^Inc: {multiplier: 200, step: 2}}
    ThenReturns:
    - "int" : { "$numberLong" :"401"}
    - "int" : { "$numberLong" :"403"}
    - "int" : { "$numberLong" :"405"}

  - Name: IncrementAllDefaults
    GivenTemplate:
      int: {^Inc: {}}
    ThenReturns:
    - "int" : { "$numberLong" :"1"}
    - "int" : { "$numberLong" :"2"}
    - "int" : { "$numberLong" :"3"}

  - Name: Cycle through three pre-computed elements
    GivenTemplate:
      a: {^Cycle: {ofLength: 3, fromGenerator: {^FastRandomString: {length: {^RandomInt: {min: 2, max: 5}}}}}}
    ThenReturns:
      - {a: qg}
      - {a: kt}
      - {a: JJP}
      - {a: qg}
      - {a: kt}
      - {a: JJP}
      - {a: qg}

  - Name: Cycle with an integer generator
    GivenTemplate:
      a: {^Cycle: {ofLength: 2, fromGenerator: {^RandomInt: {distribution: poisson, mean: 10000000000000}}}}
    ThenReturns:
      - {a: 9999997460716}
      - {a: 9999996810402}
      - {a: 9999997460716}
      - {a: 9999996810402}
      - {a: 9999997460716}
      - {a: 9999996810402}
      - {a: 9999997460716}
      - {a: 9999996810402}

  - Name: Cycle with a single element
    GivenTemplate:
      a: {^Cycle: {ofLength: 1, fromGenerator: {^FastRandomString: {length: {^RandomInt: {min: 2, max: 5}}}}}}
    ThenReturns:
      - {a: qg}
      - {a: qg}
      - {a: qg}
      - {a: qg}

  - Name: Repeat three pre-computed elements
    GivenTemplate:
      a: {^Repeat: {count: 3, fromGenerator: {^FastRandomString: {length: {^RandomInt: {min: 2, max: 5}}}}}}
    ThenReturns:
      - {a: qg}
      - {a: qg}
      - {a: qg}
      - {a: kt}
      - {a: kt}
      - {a: kt}
      - {a: JJP}
      - {a: JJP}
      - {a: JJP}

  - Name: Repeat an integer generator
    GivenTemplate:
      a: {^Repeat: {count: 2, fromGenerator: {^RandomInt: {distribution: poisson, mean: 10000000000000}}}}
    ThenReturns:
      - {a: 9999997460716}
      - {a: 9999997460716}
      - {a: 9999996810402}
      - {a: 9999996810402}
      - {a: 9999995032424}
      - {a: 9999995032424}

  - Name: Repeat with count equal to one
    GivenTemplate:
      a: {^Repeat: {count: 1, fromGenerator: {^FastRandomString: {length: {^RandomInt: {min: 2, max: 5}}}}}}
    ThenReturns:
      - {a: qg}
      - {a: kt}
      - {a: JJP}

  - Name: FixedGenerated value for pre-computing, caching and re-using the result of an expensive generator
    GivenTemplate:
      a: {^FixedGeneratedValue: {fromGenerator: {^RandomInt: {distribution: poisson, mean: 10000000000000}}}}
    ThenReturns:
      - {a: 9999997460716}
      - {a: 9999997460716}
      - {a: 9999997460716}
      - {a: 9999997460716}

  # https://www.boost.org/doc/libs/1_76_0/libs/format/doc/format.html
  - Name: FormatString
    GivenTemplate:
      a:
        ^FormatString:
          format: "% 4s:%8.2f:%04x:% 8s: %s"
          withArgs:
            - "c"
            - 3.1415
            - {^RandomInt: {min: 0, max: 999}}
            - {^RandomString: {length: 4, alphabet: b}}
            - {^RandomDate: { min: "2020-01-01", max: "2021-01-01" }}
    ThenReturns:
      - { "a" : "   c:    3.14:009b:    bbbb: 1581225505613" }

  - Name: FormatStringRandomIntWhere
    GivenTemplate:
      $where:
        ^FormatString:
          format: "function() { sleep(%d); return true; }"
          withArgs: [{^RandomInt: {min: 0, max: 999}}]
    ThenReturns:
      - { "$where" :  "function() { sleep(155); return true; }"}
      - { "$where" :  "function() { sleep(107); return true; }"}
      - { "$where" :  "function() { sleep(22); return true; }"}
      - { "$where" :  "function() { sleep(73); return true; }"}
      - { "$where" :  "function() { sleep(343); return true; }"}
      - { "$where" :  "function() { sleep(826); return true; }"}

  - Name: FormatStringRandomChoseWhere
    GivenTemplate:
      $where:
        ^FormatString:
          format: "function() { sleep(%2.d); return true; }"
          withArgs: [{^Choose: {from: [0, 60], weights: [2, 1]}}]
    ThenReturns:
      - { "$where" :  "function() { sleep( 0); return true; }"}
      - { "$where" :  "function() { sleep( 0); return true; }"}
      - { "$where" :  "function() { sleep( 0); return true; }"}
      - { "$where" :  "function() { sleep(60); return true; }"}
      - { "$where" :  "function() { sleep( 0); return true; }"}

  - Name: FormatStringCycleWhere
    GivenTemplate:
      $where:
        ^FormatString:
          format: "function() { sleep(%s); return true; }"
          withArgs: [{^Cycle: {ofLength: 3, fromGenerator: {^RandomString: {length: 2, alphabet: "06"}}}}]
    ThenReturns:
      - { "$where" :  "function() { sleep(00); return true; }"} # 0
      - { "$where" :  "function() { sleep(00); return true; }"} # 1
      - { "$where" :  "function() { sleep(06); return true; }"} # 2
      - { "$where" :  "function() { sleep(00); return true; }"} # 0
      - { "$where" :  "function() { sleep(00); return true; }"} # 1
      - { "$where" :  "function() { sleep(06); return true; }"} # 2

  - Name: FormatStringWithQuotes
    GivenTemplate:
      $where:
        ^FormatString:
          format: "function() { print('%s'); }"
          withArgs: ["Jimmy'); drop table x; print('"]
    ThenReturns:
      - { "$where" :  "function() { print('Jimmy'); drop table x; print(''); }"} # 0

  # https://www.boost.org/doc/libs/1_76_0/libs/format/doc/format.html
  - Name: Format positional
    GivenTemplate:
      a:
        ^FormatString:
          format: "%1% %2% %3% %2% %1%\n"
          withArgs:
            - first
            - second
            - third
    ThenReturns:
      - { "a" : "first second third second first\n" }

  # https://www.boost.org/doc/libs/1_76_0/libs/format/doc/format.html
  - Name: Format Tabulated
    GivenTemplate:
      a:
        ^FormatString:
          format: "%2%, %1%, %|30t|%3%"
          withArgs:
            - name
            - surname
            - "+1 55 55 55 55"
    ThenReturns:
      - { "a" : "surname, name,                +1 55 55 55 55" }

  - Name: FormatString Like ObjectId
    GivenTemplate:
      a: {^FormatString: {"format": "c%03d%s", "withArgs": [1, {^RandomString: {length: 20, alphabet: a}}]}}
    ThenReturns:
      - { "a" : "c001aaaaaaaaaaaaaaaaaaaa" }

  - Name: FormatString Format Missing
    GivenTemplate:
      a: {^FormatString: {"withArgs": [1, {^RandomString: {length: 20, alphabet: a}}]}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: FormatString Format Blank
    GivenTemplate:
      a: {^FormatString: {"format": "", "withArgs": [1, {^RandomString: {length: 20, alphabet: a}}]}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: FormatString withArgs missing
    GivenTemplate:
      a: {^FormatString: {"format": "%s"}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: FormatString withArgs not a sequence
    GivenTemplate:
      a: {^FormatString: {"format": "%s", "withArgs": 1}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: FormatString missing format and withArgs
    GivenTemplate:
      a: {^FormatString: {}}
    ThenThrows: InvalidValueGeneratorSyntax

  - Name: RandomString ObjectID
    GivenTemplate:
      a: {^ObjectId: {^RandomString: {length: 24, alphabet: "0123456789ABCDEF"}}}
    ThenReturns:
      - { "a" : { "$oid" : "21015dc462736b80b9a637c8" } }
      - { "a" : { "$oid" : "e4508f40e80e6f6a9914d0b2" } }
      - { "a" : { "$oid" : "5001154f526c36abafc0340c" } }
      - { "a" : { "$oid" : "534c7abdc66508f669117956" } }

  - Name: Formatted ObjectID
    GivenTemplate:
      a: {^ObjectId: {^FormatString: {"format": "c%03d%s", "withArgs": [1, {^RandomString: {length: 20, alphabet: a}}]}} }
    ThenReturns:
      - { "a" : { "$oid" : "c001aaaaaaaaaaaaaaaaaaaa" } }

  - Name: Random ObjectID
    GivenTemplate:
      a: {^ObjectId: {^FormatString: {"format": "%04d%s", "withArgs": [{^RandomInt: {min: 0, max: 999}}, {^RandomString: {length: 20, alphabet: b}}]}} }
    ThenReturns:
      - { "a" : { "$oid" : "0155bbbbbbbbbbbbbbbbbbbb" } }
      - { "a" : { "$oid" : "0107bbbbbbbbbbbbbbbbbbbb" } }
      - { "a" : { "$oid" : "0022bbbbbbbbbbbbbbbbbbbb" } }
      - { "a" : { "$oid" : "0073bbbbbbbbbbbbbbbbbbbb" } }
      - { "a" : { "$oid" : "0343bbbbbbbbbbbbbbbbbbbb" } }

  - Name: Next ObjectID
    GivenTemplate:
      a: {^ObjectId: ""}
    ThenExecuteAndIgnore: true
    # The actual Value will be something like the following
    #   { "a" : { "$oid" : "61159412db9cbf4eec5d2061" } }

  - Name: 2D Walk
    GivenTemplate:
      a: {^TwoDWalk: {
        docsPerSeries: 3,
        minX: 0,
        maxX: 5,
        minY: 100,
        maxY: 120,
        distPerDoc: 0.1,
      }}
    ThenReturns:
      # The generator picks a starting point within the min/max bounds,
      # picks a random direction, and steps forward 0.1 in that direction.
      # After 3 docs it starts over with a new initial point and direction.
      # The points can step outside the min/max bounds, but each starting point is
      # generated within the bounds.
      - { "a" : [0.87597770637753735734, 102.15711220843586204] }
      - { "a" : [0.97500959934942732499, 102.17099328095940791] }
      - { "a" : [1.0740414923213172926, 102.18487435348295378] }
      - { "a" : [0.41177379749317610802, 106.78081568430897619] }
      - { "a" : [0.45809298746253845902, 106.69218988309633289] }
      - { "a" : [0.50441217743190081002, 106.6035640818836896] }
      - { "a" : [3.9359523367534210436, 105.26147012586838514] }
      - { "a" : [3.8554769964739108445, 105.32083105246911714] }
      - { "a" : [3.7750016561944006455, 105.38019197906984914] }
